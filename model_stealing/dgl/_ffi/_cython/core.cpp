/* Generated by Cython 0.29.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "../include/dgl/runtime/c_object_api.h",
            "../include/dgl/runtime/c_runtime_api.h"
        ],
        "include_dirs": [
            "../include/",
            "../third_party/dmlc-core/include",
            "../third_party/dlpack/include"
        ],
        "language": "c++",
        "libraries": [
            "dgl"
        ],
        "library_dirs": [
            "dgl",
            "../build/Release",
            "../build"
        ],
        "name": "dgl._ffi._cy3.core",
        "sources": [
            "dgl/_ffi/_cython/core.pyx"
        ]
    },
    "module_name": "dgl._ffi._cy3.core"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_24"
#define CYTHON_HEX_VERSION 0x001D18F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__dgl___ffi___cy3__core
#define __PYX_HAVE_API__dgl___ffi___cy3__core
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <stdio.h>
#include "pythread.h"
#include <stdint.h>
#include "dgl/runtime/c_runtime_api.h"
#include "dgl/runtime/c_object_api.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "dgl/_ffi/_cython/./object.pxi",
  "stringsource",
  "dgl/_ffi/_cython/./function.pxi",
  "dgl/_ffi/_cython/./base.pxi",
  "dgl/_ffi/_cython/./ndarray.pxi",
  "dgl/_ffi/_cython/core.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/* "dgl/_ffi/_cython/base.pxi":58
 *         DLContext v_ctx
 * 
 * ctypedef int64_t dgl_index_t             # <<<<<<<<<<<<<<
 * ctypedef DLTensor* DLTensorHandle
 * ctypedef DLTensor DGLArray
 */
typedef int64_t __pyx_t_3dgl_4_ffi_4_cy3_4core_dgl_index_t;

/*--- Type declarations ---*/
struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase;
struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase;
struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase;

/* "dgl/_ffi/_cython/base.pxi":9
 * import ctypes
 * 
 * cdef enum DGLTypeCode:             # <<<<<<<<<<<<<<
 *     kInt = 0
 *     kUInt = 1
 */
enum __pyx_t_3dgl_4_ffi_4_cy3_4core_DGLTypeCode {
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kInt = 0,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kUInt = 1,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kFloat = 2,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kHandle = 3,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kNull = 4,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kDGLType = 5,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kDGLContext = 6,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kArrayHandle = 7,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kObjectHandle = 8,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kModuleHandle = 9,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kFuncHandle = 10,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kStr = 11,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kBytes = 12,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kNDArrayContainer = 13,
  __pyx_e_3dgl_4_ffi_4_cy3_4core_kExtBegin = 15
};

/* "dgl/_ffi/_cython/base.pxi":59
 * 
 * ctypedef int64_t dgl_index_t
 * ctypedef DLTensor* DLTensorHandle             # <<<<<<<<<<<<<<
 * ctypedef DLTensor DGLArray
 * ctypedef DGLArray* CDGLArrayHandle
 */
typedef DLTensor *__pyx_t_3dgl_4_ffi_4_cy3_4core_DLTensorHandle;

/* "dgl/_ffi/_cython/base.pxi":60
 * ctypedef int64_t dgl_index_t
 * ctypedef DLTensor* DLTensorHandle
 * ctypedef DLTensor DGLArray             # <<<<<<<<<<<<<<
 * ctypedef DGLArray* CDGLArrayHandle
 * ctypedef void* DGLStreamHandle
 */
typedef DLTensor __pyx_t_3dgl_4_ffi_4_cy3_4core_DGLArray;

/* "dgl/_ffi/_cython/base.pxi":61
 * ctypedef DLTensor* DLTensorHandle
 * ctypedef DLTensor DGLArray
 * ctypedef DGLArray* CDGLArrayHandle             # <<<<<<<<<<<<<<
 * ctypedef void* DGLStreamHandle
 * ctypedef void* DGLRetValueHandle
 */
typedef __pyx_t_3dgl_4_ffi_4_cy3_4core_DGLArray *__pyx_t_3dgl_4_ffi_4_cy3_4core_CDGLArrayHandle;

/* "dgl/_ffi/_cython/base.pxi":62
 * ctypedef DLTensor DGLArray
 * ctypedef DGLArray* CDGLArrayHandle
 * ctypedef void* DGLStreamHandle             # <<<<<<<<<<<<<<
 * ctypedef void* DGLRetValueHandle
 * ctypedef void* DGLFunctionHandle
 */
typedef void *__pyx_t_3dgl_4_ffi_4_cy3_4core_DGLStreamHandle;

/* "dgl/_ffi/_cython/base.pxi":63
 * ctypedef DGLArray* CDGLArrayHandle
 * ctypedef void* DGLStreamHandle
 * ctypedef void* DGLRetValueHandle             # <<<<<<<<<<<<<<
 * ctypedef void* DGLFunctionHandle
 * ctypedef void* ObjectHandle
 */
typedef void *__pyx_t_3dgl_4_ffi_4_cy3_4core_DGLRetValueHandle;

/* "dgl/_ffi/_cython/base.pxi":64
 * ctypedef void* DGLStreamHandle
 * ctypedef void* DGLRetValueHandle
 * ctypedef void* DGLFunctionHandle             # <<<<<<<<<<<<<<
 * ctypedef void* ObjectHandle
 * 
 */
typedef void *__pyx_t_3dgl_4_ffi_4_cy3_4core_DGLFunctionHandle;

/* "dgl/_ffi/_cython/base.pxi":65
 * ctypedef void* DGLRetValueHandle
 * ctypedef void* DGLFunctionHandle
 * ctypedef void* ObjectHandle             # <<<<<<<<<<<<<<
 * 
 * ctypedef int (*DGLPackedCFunc)(
 */
typedef void *__pyx_t_3dgl_4_ffi_4_cy3_4core_ObjectHandle;

/* "dgl/_ffi/_cython/base.pxi":67
 * ctypedef void* ObjectHandle
 * 
 * ctypedef int (*DGLPackedCFunc)(             # <<<<<<<<<<<<<<
 *     DGLValue* args,
 *     int* type_codes,
 */
typedef int (*__pyx_t_3dgl_4_ffi_4_cy3_4core_DGLPackedCFunc)(DGLValue *, int *, int, __pyx_t_3dgl_4_ffi_4_cy3_4core_DGLRetValueHandle, void *);

/* "dgl/_ffi/_cython/base.pxi":74
 *     void* resource_handle)
 * 
 * ctypedef void (*DGLPackedCFuncFinalizer)(void* resource_handle)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "dgl/runtime/c_runtime_api.h":
 */
typedef void (*__pyx_t_3dgl_4_ffi_4_cy3_4core_DGLPackedCFuncFinalizer)(void *);

/* "dgl/_ffi/_cython/object.pxi":34
 * 
 * 
 * cdef class ObjectBase:             # <<<<<<<<<<<<<<
 *     cdef void* chandle
 * 
 */
struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_vtab;
  void *chandle;
};


/* "dgl/_ffi/_cython/function.pxi":250
 * 
 * 
 * cdef class FunctionBase:             # <<<<<<<<<<<<<<
 *     cdef DGLFunctionHandle chandle
 *     cdef int is_global
 */
struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_vtab;
  __pyx_t_3dgl_4_ffi_4_cy3_4core_DGLFunctionHandle chandle;
  int is_global;
};


/* "dgl/_ffi/_cython/ndarray.pxi":27
 * 
 * 
 * cdef class NDArrayBase:             # <<<<<<<<<<<<<<
 *     cdef DLTensor* chandle
 *     cdef int c_is_view
 */
struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase {
  PyObject_HEAD
  struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_vtab;
  DLTensor *chandle;
  int c_is_view;
};



/* "dgl/_ffi/_cython/object.pxi":34
 * 
 * 
 * cdef class ObjectBase:             # <<<<<<<<<<<<<<
 *     cdef void* chandle
 * 
 */

struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_ObjectBase {
  PyObject *(*_set_handle)(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *, PyObject *);
};
static struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_ObjectBase;


/* "dgl/_ffi/_cython/function.pxi":250
 * 
 * 
 * cdef class FunctionBase:             # <<<<<<<<<<<<<<
 *     cdef DGLFunctionHandle chandle
 *     cdef int is_global
 */

struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_FunctionBase {
  PyObject *(*_set_handle)(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *, PyObject *);
};
static struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_FunctionBase;
static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_12FunctionBase__set_handle(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *, PyObject *);


/* "dgl/_ffi/_cython/ndarray.pxi":27
 * 
 * 
 * cdef class NDArrayBase:             # <<<<<<<<<<<<<<
 *     cdef DLTensor* chandle
 *     cdef int c_is_view
 */

struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_NDArrayBase {
  PyObject *(*_set_handle)(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *, PyObject *);
};
static struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_NDArrayBase;
static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_11NDArrayBase__set_handle(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *, PyObject *);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   (Py_TYPE(obj)->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_10ObjectBase__set_handle(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self, PyObject *__pyx_v_handle); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_12FunctionBase__set_handle(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, PyObject *__pyx_v_handle); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_11NDArrayBase__set_handle(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self, PyObject *__pyx_v_handle); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'dgl._ffi._cy3.core' */
static PyTypeObject *__pyx_ptype_3dgl_4_ffi_4_cy3_4core_ObjectBase = 0;
static PyTypeObject *__pyx_ptype_3dgl_4_ffi_4_cy3_4core_FunctionBase = 0;
static PyTypeObject *__pyx_ptype_3dgl_4_ffi_4_cy3_4core_NDArrayBase = 0;
static char const *__pyx_v_3dgl_4_ffi_4_cy3_4core__c_str_dltensor;
static char const *__pyx_v_3dgl_4_ffi_4_cy3_4core__c_str_used_dltensor;
static PyObject *__pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_COMPATS = 0;
static PyObject *__pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_EXT_RET = 0;
static PyObject *__pyx_v_3dgl_4_ffi_4_cy3_4core__CLASS_NDARRAY = 0;
static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_py_str(char const *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_c_str(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_ctypes_handle(void *); /*proto*/
static CYTHON_INLINE void *__pyx_f_3dgl_4_ffi_4_cy3_4core_c_handle(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_make_ret_object(void *); /*proto*/
static void __pyx_f_3dgl_4_ffi_4_cy3_4core_dgl_callback_finalize(void *); /*proto*/
static int __pyx_f_3dgl_4_ffi_4_cy3_4core_dgl_callback(DGLValue *, int *, int, __pyx_t_3dgl_4_ffi_4_cy3_4core_DGLRetValueHandle, void *); /*proto*/
static CYTHON_INLINE int __pyx_f_3dgl_4_ffi_4_cy3_4core_make_arg(PyObject *, DGLValue *, int *, PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_make_ret_bytes(void *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_make_ret(DGLValue, int); /*proto*/
static CYTHON_INLINE int __pyx_f_3dgl_4_ffi_4_cy3_4core_FuncCall3(void *, PyObject *, int, DGLValue *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_3dgl_4_ffi_4_cy3_4core_FuncCall(void *, PyObject *, DGLValue *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_3dgl_4_ffi_4_cy3_4core_ConstructorCall(void *, int, PyObject *, void **); /*proto*/
static void __pyx_f_3dgl_4_ffi_4_cy3_4core__c_dlpack_deleter(PyObject *); /*proto*/
static PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_c_make_array(void *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "dgl._ffi._cy3.core"
extern int __pyx_module_is_main_dgl___ffi___cy3__core;
int __pyx_module_is_main_dgl___ffi___cy3__core = 0;

/* Implementation of 'dgl._ffi._cy3.core' */
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static const char __pyx_k__12[] = "";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_cast[] = "cast";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_Number[] = "Number";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_c_byte[] = "c_byte";
static const char __pyx_k_ctypes[] = "ctypes";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_handle[] = "handle";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_pyfunc[] = "pyfunc";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_DGLType[] = "DGLType";
static const char __pyx_k_POINTER[] = "POINTER";
static const char __pyx_k_chandle[] = "chandle";
static const char __pyx_k_fcreate[] = "fcreate";
static const char __pyx_k_is_view[] = "is_view";
static const char __pyx_k_memmove[] = "memmove";
static const char __pyx_k_numbers[] = "numbers";
static const char __pyx_k_DGLError[] = "DGLError";
static const char __pyx_k_Integral[] = "Integral";
static const char __pyx_k_c_void_p[] = "c_void_p";
static const char __pyx_k_dltensor[] = "dltensor";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_addressof[] = "addressof";
static const char __pyx_k_alignment[] = "alignment";
static const char __pyx_k_dgl_tcode[] = "_dgl_tcode";
static const char __pyx_k_is_global[] = "is_global";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_traceback[] = "traceback";
static const char __pyx_k_DGLContext[] = "DGLContext";
static const char __pyx_k_ObjectBase[] = "ObjectBase";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_dgl_handle[] = "_dgl_handle";
static const char __pyx_k_format_exc[] = "format_exc";
static const char __pyx_k_func_class[] = "func_class";
static const char __pyx_k_make_array[] = "_make_array";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_NDArrayBase[] = "NDArrayBase";
static const char __pyx_k_OBJECT_TYPE[] = "OBJECT_TYPE";
static const char __pyx_k_c_is_global[] = "c_is_global";
static const char __pyx_k_from_buffer[] = "from_buffer";
static const char __pyx_k_from_dlpack[] = "_from_dlpack";
static const char __pyx_k_CLASS_MODULE[] = "_CLASS_MODULE";
static const char __pyx_k_DGLByteArray[] = "DGLByteArray";
static const char __pyx_k_FunctionBase[] = "FunctionBase";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_api_internal[] = "_api_internal";
static const char __pyx_k_fconstructor[] = "fconstructor";
static const char __pyx_k_module_class[] = "module_class";
static const char __pyx_k_string_types[] = "string_types";
static const char __pyx_k_ObjectGeneric[] = "ObjectGeneric";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_reg_extension[] = "_reg_extension";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_CLASS_FUNCTION[] = "_CLASS_FUNCTION";
static const char __pyx_k_DGLArrayHandle[] = "DGLArrayHandle";
static const char __pyx_k_memmove_failed[] = "memmove failed";
static const char __pyx_k_object_generic[] = "object_generic";
static const char __pyx_k_runtime_ctypes[] = "runtime_ctypes";
static const char __pyx_k_register_object[] = "_register_object";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_set_class_module[] = "_set_class_module";
static const char __pyx_k_convert_to_object[] = "convert_to_object";
static const char __pyx_k_set_class_ndarray[] = "_set_class_ndarray";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_dgl__ffi__cy3_core[] = "dgl._ffi._cy3.core";
static const char __pyx_k_set_class_function[] = "_set_class_function";
static const char __pyx_k_convert_to_dgl_func[] = "convert_to_dgl_func";
static const char __pyx_k_Unhandled_type_code_d[] = "Unhandled type code %d";
static const char __pyx_k_set_class_object_base[] = "_set_class_object_base";
static const char __pyx_k_dgl__ffi__cython_object_pxi[] = "dgl/_ffi/_cython/./object.pxi";
static const char __pyx_k_s_object_has_no_attribute_s[] = "'%s' object has no attribute '%s'";
static const char __pyx_k_dgl__ffi__cython_ndarray_pxi[] = "dgl/_ffi/_cython/./ndarray.pxi";
static const char __pyx_k_dgl__ffi__cython_function_pxi[] = "dgl/_ffi/_cython/./function.pxi";
static const char __pyx_k_Don_t_know_how_to_handle_type_s[] = "Don't know how to handle type %s";
static const char __pyx_k_PackedFunction_can_only_support[] = "PackedFunction can only support one return value";
static const char __pyx_k_Expect_a_dltensor_field_pycapsul[] = "Expect a dltensor field, pycapsule.PyCapsule can only be consumed once";
static const char __pyx_k_self_chandle_cannot_be_converted[] = "self.chandle cannot be converted to a Python object for pickling";
static const char __pyx_k_to_dlpack_do_not_work_with_memor[] = "to_dlpack do not work with memory views";
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_n_s_CLASS_FUNCTION;
static PyObject *__pyx_n_s_CLASS_MODULE;
static PyObject *__pyx_n_s_DGLArrayHandle;
static PyObject *__pyx_n_s_DGLByteArray;
static PyObject *__pyx_n_s_DGLContext;
static PyObject *__pyx_n_s_DGLError;
static PyObject *__pyx_n_s_DGLType;
static PyObject *__pyx_kp_s_Don_t_know_how_to_handle_type_s;
static PyObject *__pyx_kp_s_Expect_a_dltensor_field_pycapsul;
static PyObject *__pyx_n_s_FunctionBase;
static PyObject *__pyx_n_s_Integral;
static PyObject *__pyx_n_s_NDArrayBase;
static PyObject *__pyx_n_s_Number;
static PyObject *__pyx_n_s_OBJECT_TYPE;
static PyObject *__pyx_n_s_ObjectBase;
static PyObject *__pyx_n_s_ObjectGeneric;
static PyObject *__pyx_n_s_POINTER;
static PyObject *__pyx_kp_s_PackedFunction_can_only_support;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unhandled_type_code_d;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s__12;
static PyObject *__pyx_n_s_addressof;
static PyObject *__pyx_n_s_alignment;
static PyObject *__pyx_n_s_api_internal;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_c_byte;
static PyObject *__pyx_n_s_c_is_global;
static PyObject *__pyx_n_s_c_void_p;
static PyObject *__pyx_n_s_cast;
static PyObject *__pyx_n_s_chandle;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cls;
static PyObject *__pyx_n_s_convert_to_dgl_func;
static PyObject *__pyx_n_s_convert_to_object;
static PyObject *__pyx_n_s_ctypes;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_dgl__ffi__cy3_core;
static PyObject *__pyx_kp_s_dgl__ffi__cython_function_pxi;
static PyObject *__pyx_kp_s_dgl__ffi__cython_ndarray_pxi;
static PyObject *__pyx_kp_s_dgl__ffi__cython_object_pxi;
static PyObject *__pyx_n_s_dgl_handle;
static PyObject *__pyx_n_s_dgl_tcode;
static PyObject *__pyx_n_s_dltensor;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_fconstructor;
static PyObject *__pyx_n_s_fcreate;
static PyObject *__pyx_n_s_format_exc;
static PyObject *__pyx_n_s_from_buffer;
static PyObject *__pyx_n_s_from_dlpack;
static PyObject *__pyx_n_s_func_class;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_handle;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_is_global;
static PyObject *__pyx_n_s_is_view;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_make_array;
static PyObject *__pyx_n_s_memmove;
static PyObject *__pyx_kp_s_memmove_failed;
static PyObject *__pyx_n_s_module_class;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_numbers;
static PyObject *__pyx_n_s_object_generic;
static PyObject *__pyx_n_s_ptr;
static PyObject *__pyx_n_s_pyfunc;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reg_extension;
static PyObject *__pyx_n_s_register_object;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_n_s_runtime_ctypes;
static PyObject *__pyx_kp_s_s_object_has_no_attribute_s;
static PyObject *__pyx_kp_s_self_chandle_cannot_be_converted;
static PyObject *__pyx_n_s_set_class_function;
static PyObject *__pyx_n_s_set_class_module;
static PyObject *__pyx_n_s_set_class_ndarray;
static PyObject *__pyx_n_s_set_class_object_base;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_string_types;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_to_dlpack_do_not_work_with_memor;
static PyObject *__pyx_n_s_traceback;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core__register_object(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, PyObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle___get__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self); /* proto */
static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle_2__set__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static void __pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase___dealloc__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_2__getattr__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_4__init_handle_by_constructor__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self, PyObject *__pyx_v_fconstructor, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_2convert_to_dgl_func(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pyfunc); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global___get__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self); /* proto */
static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global_2__set__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle___get__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self); /* proto */
static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle_2__set__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase___init__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, PyObject *__pyx_v_handle, PyObject *__pyx_v_is_global); /* proto */
static void __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_2__dealloc__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_4__call__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_4_set_class_module(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_module_class); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_6_set_class_function(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func_class); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_8_from_dlpack(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dltensor); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_11_dgl_handle___get__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle___get__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self); /* proto */
static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle_2__set__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase___init__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self, PyObject *__pyx_v_handle, PyObject *__pyx_v_is_view); /* proto */
static void __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_2__dealloc__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_4to_dlpack(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self, PyObject *__pyx_v_alignment); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10_reg_extension(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_fcreate); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12_make_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_handle, PyObject *__pyx_v_is_view); /* proto */
static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_14_set_class_ndarray(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_tp_new_3dgl_4_ffi_4_cy3_4core_ObjectBase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3dgl_4_ffi_4_cy3_4core_FunctionBase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3dgl_4_ffi_4_cy3_4core_NDArrayBase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
/* Late includes */

/* "dgl/_ffi/_cython/base.pxi":131
 *                          int* out_success)
 * 
 * cdef inline py_str(const char* x):             # <<<<<<<<<<<<<<
 *     if PY_MAJOR_VERSION < 3:
 *         return x
 */

static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_py_str(char const *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("py_str", 0);

  /* "dgl/_ffi/_cython/base.pxi":132
 * 
 * cdef inline py_str(const char* x):
 *     if PY_MAJOR_VERSION < 3:             # <<<<<<<<<<<<<<
 *         return x
 *     else:
 */
  __pyx_t_1 = ((PY_MAJOR_VERSION < 3) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/base.pxi":133
 * cdef inline py_str(const char* x):
 *     if PY_MAJOR_VERSION < 3:
 *         return x             # <<<<<<<<<<<<<<
 *     else:
 *         return x.decode("utf-8")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/base.pxi":132
 * 
 * cdef inline py_str(const char* x):
 *     if PY_MAJOR_VERSION < 3:             # <<<<<<<<<<<<<<
 *         return x
 *     else:
 */
  }

  /* "dgl/_ffi/_cython/base.pxi":135
 *         return x
 *     else:
 *         return x.decode("utf-8")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_x, 0, strlen(__pyx_v_x), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "dgl/_ffi/_cython/base.pxi":131
 *                          int* out_success)
 * 
 * cdef inline py_str(const char* x):             # <<<<<<<<<<<<<<
 *     if PY_MAJOR_VERSION < 3:
 *         return x
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.py_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/base.pxi":138
 * 
 * 
 * cdef inline c_str(pystr):             # <<<<<<<<<<<<<<
 *     """Create ctypes char * from a python string
 *     Parameters
 */

static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_c_str(PyObject *__pyx_v_pystr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_str", 0);

  /* "dgl/_ffi/_cython/base.pxi":150
 *         A char pointer that can be passed to C API
 *     """
 *     return pystr.encode("utf-8")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pystr, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_utf_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/base.pxi":138
 * 
 * 
 * cdef inline c_str(pystr):             # <<<<<<<<<<<<<<
 *     """Create ctypes char * from a python string
 *     Parameters
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.c_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/base.pxi":153
 * 
 * 
 * cdef inline CALL(int ret):             # <<<<<<<<<<<<<<
 *     if ret != 0:
 *         raise DGLError(py_str(DGLGetLastError()))
 */

static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(int __pyx_v_ret) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CALL", 0);

  /* "dgl/_ffi/_cython/base.pxi":154
 * 
 * cdef inline CALL(int ret):
 *     if ret != 0:             # <<<<<<<<<<<<<<
 *         raise DGLError(py_str(DGLGetLastError()))
 * 
 */
  __pyx_t_1 = ((__pyx_v_ret != 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "dgl/_ffi/_cython/base.pxi":155
 * cdef inline CALL(int ret):
 *     if ret != 0:
 *         raise DGLError(py_str(DGLGetLastError()))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_DGLError); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_f_3dgl_4_ffi_4_cy3_4core_py_str(DGLGetLastError()); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 155, __pyx_L1_error)

    /* "dgl/_ffi/_cython/base.pxi":154
 * 
 * cdef inline CALL(int ret):
 *     if ret != 0:             # <<<<<<<<<<<<<<
 *         raise DGLError(py_str(DGLGetLastError()))
 * 
 */
  }

  /* "dgl/_ffi/_cython/base.pxi":153
 * 
 * 
 * cdef inline CALL(int ret):             # <<<<<<<<<<<<<<
 *     if ret != 0:
 *         raise DGLError(py_str(DGLGetLastError()))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.CALL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/base.pxi":158
 * 
 * 
 * cdef inline object ctypes_handle(void* chandle):             # <<<<<<<<<<<<<<
 *     """Cast C handle to ctypes handle."""
 *     return ctypes.cast(<unsigned long long>chandle, ctypes.c_void_p)
 */

static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_ctypes_handle(void *__pyx_v_chandle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ctypes_handle", 0);

  /* "dgl/_ffi/_cython/base.pxi":160
 * cdef inline object ctypes_handle(void* chandle):
 *     """Cast C handle to ctypes handle."""
 *     return ctypes.cast(<unsigned long long>chandle, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_cast); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_chandle)); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_2, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 160, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_2, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 160, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_5);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/base.pxi":158
 * 
 * 
 * cdef inline object ctypes_handle(void* chandle):             # <<<<<<<<<<<<<<
 *     """Cast C handle to ctypes handle."""
 *     return ctypes.cast(<unsigned long long>chandle, ctypes.c_void_p)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.ctypes_handle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/base.pxi":163
 * 
 * 
 * cdef inline void* c_handle(object handle):             # <<<<<<<<<<<<<<
 *     """Cast C types handle to c handle."""
 *     cdef unsigned long long v_ptr
 */

static CYTHON_INLINE void *__pyx_f_3dgl_4_ffi_4_cy3_4core_c_handle(PyObject *__pyx_v_handle) {
  unsigned PY_LONG_LONG __pyx_v_v_ptr;
  void *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned PY_LONG_LONG __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_handle", 0);

  /* "dgl/_ffi/_cython/base.pxi":166
 *     """Cast C types handle to c handle."""
 *     cdef unsigned long long v_ptr
 *     v_ptr = handle.value             # <<<<<<<<<<<<<<
 *     return <void*>(v_ptr)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_handle, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_2 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(3, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_v_ptr = __pyx_t_2;

  /* "dgl/_ffi/_cython/base.pxi":167
 *     cdef unsigned long long v_ptr
 *     v_ptr = handle.value
 *     return <void*>(v_ptr)             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((void *)__pyx_v_v_ptr);
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/base.pxi":163
 * 
 * 
 * cdef inline void* c_handle(object handle):             # <<<<<<<<<<<<<<
 *     """Cast C types handle to c handle."""
 *     cdef unsigned long long v_ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("dgl._ffi._cy3.core.c_handle", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/object.pxi":8
 * OBJECT_TYPE = []
 * 
 * def _register_object(int index, object cls):             # <<<<<<<<<<<<<<
 *     """register object class"""
 *     while len(OBJECT_TYPE) <= index:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_1_register_object(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3dgl_4_ffi_4_cy3_4core__register_object[] = "register object class";
static PyMethodDef __pyx_mdef_3dgl_4_ffi_4_cy3_4core_1_register_object = {"_register_object", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3dgl_4_ffi_4_cy3_4core_1_register_object, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3dgl_4_ffi_4_cy3_4core__register_object};
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_1_register_object(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  PyObject *__pyx_v_cls = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_register_object (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_cls,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cls)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_register_object", 1, 2, 2, 1); __PYX_ERR(0, 8, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_register_object") < 0)) __PYX_ERR(0, 8, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 8, __pyx_L3_error)
    __pyx_v_cls = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_register_object", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 8, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("dgl._ffi._cy3.core._register_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core__register_object(__pyx_self, __pyx_v_index, __pyx_v_cls);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core__register_object(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_index, PyObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_register_object", 0);

  /* "dgl/_ffi/_cython/object.pxi":10
 * def _register_object(int index, object cls):
 *     """register object class"""
 *     while len(OBJECT_TYPE) <= index:             # <<<<<<<<<<<<<<
 *         OBJECT_TYPE.append(None)
 *     OBJECT_TYPE[index] = cls
 */
  while (1) {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OBJECT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 10, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = ((__pyx_t_2 <= __pyx_v_index) != 0);
    if (!__pyx_t_3) break;

    /* "dgl/_ffi/_cython/object.pxi":11
 *     """register object class"""
 *     while len(OBJECT_TYPE) <= index:
 *         OBJECT_TYPE.append(None)             # <<<<<<<<<<<<<<
 *     OBJECT_TYPE[index] = cls
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OBJECT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Append(__pyx_t_1, Py_None); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 11, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "dgl/_ffi/_cython/object.pxi":12
 *     while len(OBJECT_TYPE) <= index:
 *         OBJECT_TYPE.append(None)
 *     OBJECT_TYPE[index] = cls             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OBJECT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__Pyx_SetItemInt(__pyx_t_1, __pyx_v_index, __pyx_v_cls, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/object.pxi":8
 * OBJECT_TYPE = []
 * 
 * def _register_object(int index, object cls):             # <<<<<<<<<<<<<<
 *     """register object class"""
 *     while len(OBJECT_TYPE) <= index:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core._register_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/object.pxi":15
 * 
 * 
 * cdef inline object make_ret_object(void* chandle):             # <<<<<<<<<<<<<<
 *     global OBJECT_TYPE
 *     cdef int tindex
 */

static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_make_ret_object(void *__pyx_v_chandle) {
  int __pyx_v_tindex;
  PyObject *__pyx_v_object_type = 0;
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_ret_object", 0);

  /* "dgl/_ffi/_cython/object.pxi":20
 *     cdef list object_type
 *     cdef object cls
 *     object_type = OBJECT_TYPE             # <<<<<<<<<<<<<<
 *     CALL(DGLObjectGetTypeIndex(chandle, &tindex))
 *     if tindex < len(object_type):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OBJECT_TYPE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_v_object_type = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/object.pxi":21
 *     cdef object cls
 *     object_type = OBJECT_TYPE
 *     CALL(DGLObjectGetTypeIndex(chandle, &tindex))             # <<<<<<<<<<<<<<
 *     if tindex < len(object_type):
 *         cls = object_type[tindex]
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLObjectGetTypeIndex(__pyx_v_chandle, (&__pyx_v_tindex))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/object.pxi":22
 *     object_type = OBJECT_TYPE
 *     CALL(DGLObjectGetTypeIndex(chandle, &tindex))
 *     if tindex < len(object_type):             # <<<<<<<<<<<<<<
 *         cls = object_type[tindex]
 *         if cls is not None:
 */
  if (unlikely(__pyx_v_object_type == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 22, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_object_type); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 22, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_v_tindex < __pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "dgl/_ffi/_cython/object.pxi":23
 *     CALL(DGLObjectGetTypeIndex(chandle, &tindex))
 *     if tindex < len(object_type):
 *         cls = object_type[tindex]             # <<<<<<<<<<<<<<
 *         if cls is not None:
 *             obj = cls.__new__(cls)
 */
    if (unlikely(__pyx_v_object_type == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 23, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_object_type, __pyx_v_tindex, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_cls = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "dgl/_ffi/_cython/object.pxi":24
 *     if tindex < len(object_type):
 *         cls = object_type[tindex]
 *         if cls is not None:             # <<<<<<<<<<<<<<
 *             obj = cls.__new__(cls)
 *         else:
 */
    __pyx_t_3 = (__pyx_v_cls != Py_None);
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {

      /* "dgl/_ffi/_cython/object.pxi":25
 *         cls = object_type[tindex]
 *         if cls is not None:
 *             obj = cls.__new__(cls)             # <<<<<<<<<<<<<<
 *         else:
 *             obj = ObjectBase.__new__(ObjectBase)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_new); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 25, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_cls) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_cls);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_obj = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "dgl/_ffi/_cython/object.pxi":24
 *     if tindex < len(object_type):
 *         cls = object_type[tindex]
 *         if cls is not None:             # <<<<<<<<<<<<<<
 *             obj = cls.__new__(cls)
 *         else:
 */
      goto __pyx_L4;
    }

    /* "dgl/_ffi/_cython/object.pxi":27
 *             obj = cls.__new__(cls)
 *         else:
 *             obj = ObjectBase.__new__(ObjectBase)             # <<<<<<<<<<<<<<
 *     else:
 *         obj = ObjectBase.__new__(ObjectBase)
 */
    /*else*/ {
      __pyx_t_1 = ((PyObject *)__pyx_tp_new_3dgl_4_ffi_4_cy3_4core_ObjectBase(((PyTypeObject *)__pyx_ptype_3dgl_4_ffi_4_cy3_4core_ObjectBase), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
      __Pyx_GOTREF(((PyObject *)__pyx_t_1));
      __pyx_v_obj = ((PyObject *)__pyx_t_1);
      __pyx_t_1 = 0;
    }
    __pyx_L4:;

    /* "dgl/_ffi/_cython/object.pxi":22
 *     object_type = OBJECT_TYPE
 *     CALL(DGLObjectGetTypeIndex(chandle, &tindex))
 *     if tindex < len(object_type):             # <<<<<<<<<<<<<<
 *         cls = object_type[tindex]
 *         if cls is not None:
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/object.pxi":29
 *             obj = ObjectBase.__new__(ObjectBase)
 *     else:
 *         obj = ObjectBase.__new__(ObjectBase)             # <<<<<<<<<<<<<<
 *     (<ObjectBase>obj).chandle = chandle
 *     return obj
 */
  /*else*/ {
    __pyx_t_1 = ((PyObject *)__pyx_tp_new_3dgl_4_ffi_4_cy3_4core_ObjectBase(((PyTypeObject *)__pyx_ptype_3dgl_4_ffi_4_cy3_4core_ObjectBase), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    __pyx_v_obj = ((PyObject *)__pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "dgl/_ffi/_cython/object.pxi":30
 *     else:
 *         obj = ObjectBase.__new__(ObjectBase)
 *     (<ObjectBase>obj).chandle = chandle             # <<<<<<<<<<<<<<
 *     return obj
 * 
 */
  ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *)__pyx_v_obj)->chandle = __pyx_v_chandle;

  /* "dgl/_ffi/_cython/object.pxi":31
 *         obj = ObjectBase.__new__(ObjectBase)
 *     (<ObjectBase>obj).chandle = chandle
 *     return obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/object.pxi":15
 * 
 * 
 * cdef inline object make_ret_object(void* chandle):             # <<<<<<<<<<<<<<
 *     global OBJECT_TYPE
 *     cdef int tindex
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.make_ret_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_object_type);
  __Pyx_XDECREF(__pyx_v_cls);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/object.pxi":37
 *     cdef void* chandle
 * 
 *     cdef _set_handle(self, handle):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if handle is None:
 */

static PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_10ObjectBase__set_handle(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self, PyObject *__pyx_v_handle) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  unsigned PY_LONG_LONG __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_handle", 0);

  /* "dgl/_ffi/_cython/object.pxi":39
 *     cdef _set_handle(self, handle):
 *         cdef unsigned long long ptr
 *         if handle is None:             # <<<<<<<<<<<<<<
 *             self.chandle = NULL
 *         else:
 */
  __pyx_t_1 = (__pyx_v_handle == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/object.pxi":40
 *         cdef unsigned long long ptr
 *         if handle is None:
 *             self.chandle = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             ptr = handle.value
 */
    __pyx_v_self->chandle = NULL;

    /* "dgl/_ffi/_cython/object.pxi":39
 *     cdef _set_handle(self, handle):
 *         cdef unsigned long long ptr
 *         if handle is None:             # <<<<<<<<<<<<<<
 *             self.chandle = NULL
 *         else:
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/object.pxi":42
 *             self.chandle = NULL
 *         else:
 *             ptr = handle.value             # <<<<<<<<<<<<<<
 *             self.chandle = <void*>(ptr)
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_handle, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_3); if (unlikely((__pyx_t_4 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 42, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_ptr = __pyx_t_4;

    /* "dgl/_ffi/_cython/object.pxi":43
 *         else:
 *             ptr = handle.value
 *             self.chandle = <void*>(ptr)             # <<<<<<<<<<<<<<
 * 
 *     property handle:
 */
    __pyx_v_self->chandle = ((void *)__pyx_v_ptr);
  }
  __pyx_L3:;

  /* "dgl/_ffi/_cython/object.pxi":37
 *     cdef void* chandle
 * 
 *     cdef _set_handle(self, handle):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if handle is None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.ObjectBase._set_handle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/object.pxi":46
 * 
 *     property handle:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.chandle == NULL:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle___get__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle___get__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dgl/_ffi/_cython/object.pxi":47
 *     property handle:
 *         def __get__(self):
 *             if self.chandle == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_self->chandle == NULL) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/object.pxi":48
 *         def __get__(self):
 *             if self.chandle == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return ctypes_handle(self.chandle)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/object.pxi":47
 *     property handle:
 *         def __get__(self):
 *             if self.chandle == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  }

  /* "dgl/_ffi/_cython/object.pxi":50
 *                 return None
 *             else:
 *                 return ctypes_handle(self.chandle)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_ctypes_handle(__pyx_v_self->chandle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "dgl/_ffi/_cython/object.pxi":46
 * 
 *     property handle:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.chandle == NULL:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.ObjectBase.handle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/object.pxi":52
 *                 return ctypes_handle(self.chandle)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_handle(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle_2__set__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle_2__set__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dgl/_ffi/_cython/object.pxi":53
 * 
 *         def __set__(self, value):
 *             self._set_handle(value)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_ObjectBase *)__pyx_v_self->__pyx_vtab)->_set_handle(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/object.pxi":52
 *                 return ctypes_handle(self.chandle)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_handle(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.ObjectBase.handle.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/object.pxi":55
 *             self._set_handle(value)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         CALL(DGLObjectFree(self.chandle))
 * 
 */

/* Python wrapper */
static void __pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase___dealloc__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase___dealloc__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "dgl/_ffi/_cython/object.pxi":56
 * 
 *     def __dealloc__(self):
 *         CALL(DGLObjectFree(self.chandle))             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, name):
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLObjectFree(__pyx_v_self->chandle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/object.pxi":55
 *             self._set_handle(value)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         CALL(DGLObjectFree(self.chandle))
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("dgl._ffi._cy3.core.ObjectBase.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "dgl/_ffi/_cython/object.pxi":58
 *         CALL(DGLObjectFree(self.chandle))
 * 
 *     def __getattr__(self, name):             # <<<<<<<<<<<<<<
 *         cdef DGLValue ret_val
 *         cdef int ret_type_code, ret_succ
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_3__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_3__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_2__getattr__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_2__getattr__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self, PyObject *__pyx_v_name) {
  DGLValue __pyx_v_ret_val;
  int __pyx_v_ret_type_code;
  int __pyx_v_ret_succ;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "dgl/_ffi/_cython/object.pxi":61
 *         cdef DGLValue ret_val
 *         cdef int ret_type_code, ret_succ
 *         CALL(DGLObjectGetAttr(self.chandle, c_str(name),             # <<<<<<<<<<<<<<
 *                             &ret_val, &ret_type_code, &ret_succ))
 *         if ret_succ == 0:
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_c_str(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 61, __pyx_L1_error)

  /* "dgl/_ffi/_cython/object.pxi":62
 *         cdef int ret_type_code, ret_succ
 *         CALL(DGLObjectGetAttr(self.chandle, c_str(name),
 *                             &ret_val, &ret_type_code, &ret_succ))             # <<<<<<<<<<<<<<
 *         if ret_succ == 0:
 *             raise AttributeError(
 */
  __pyx_t_3 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLObjectGetAttr(__pyx_v_self->chandle, __pyx_t_2, (&__pyx_v_ret_val), (&__pyx_v_ret_type_code), (&__pyx_v_ret_succ))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "dgl/_ffi/_cython/object.pxi":63
 *         CALL(DGLObjectGetAttr(self.chandle, c_str(name),
 *                             &ret_val, &ret_type_code, &ret_succ))
 *         if ret_succ == 0:             # <<<<<<<<<<<<<<
 *             raise AttributeError(
 *                 "'%s' object has no attribute '%s'" % (type(self), name))
 */
  __pyx_t_4 = ((__pyx_v_ret_succ == 0) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "dgl/_ffi/_cython/object.pxi":65
 *         if ret_succ == 0:
 *             raise AttributeError(
 *                 "'%s' object has no attribute '%s'" % (type(self), name))             # <<<<<<<<<<<<<<
 *         return make_ret(ret_val, ret_type_code)
 * 
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_v_name);
    __Pyx_GIVEREF(__pyx_v_name);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_name);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_object_has_no_attribute_s, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dgl/_ffi/_cython/object.pxi":64
 *                             &ret_val, &ret_type_code, &ret_succ))
 *         if ret_succ == 0:
 *             raise AttributeError(             # <<<<<<<<<<<<<<
 *                 "'%s' object has no attribute '%s'" % (type(self), name))
 *         return make_ret(ret_val, ret_type_code)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_AttributeError, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 64, __pyx_L1_error)

    /* "dgl/_ffi/_cython/object.pxi":63
 *         CALL(DGLObjectGetAttr(self.chandle, c_str(name),
 *                             &ret_val, &ret_type_code, &ret_succ))
 *         if ret_succ == 0:             # <<<<<<<<<<<<<<
 *             raise AttributeError(
 *                 "'%s' object has no attribute '%s'" % (type(self), name))
 */
  }

  /* "dgl/_ffi/_cython/object.pxi":66
 *             raise AttributeError(
 *                 "'%s' object has no attribute '%s'" % (type(self), name))
 *         return make_ret(ret_val, ret_type_code)             # <<<<<<<<<<<<<<
 * 
 *     def __init_handle_by_constructor__(self, fconstructor, *args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_3dgl_4_ffi_4_cy3_4core_make_ret(__pyx_v_ret_val, __pyx_v_ret_type_code); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/object.pxi":58
 *         CALL(DGLObjectFree(self.chandle))
 * 
 *     def __getattr__(self, name):             # <<<<<<<<<<<<<<
 *         cdef DGLValue ret_val
 *         cdef int ret_type_code, ret_succ
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.ObjectBase.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/object.pxi":68
 *         return make_ret(ret_val, ret_type_code)
 * 
 *     def __init_handle_by_constructor__(self, fconstructor, *args):             # <<<<<<<<<<<<<<
 *         """Initialize the handle by calling constructor function.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_5__init_handle_by_constructor__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3dgl_4_ffi_4_cy3_4core_10ObjectBase_4__init_handle_by_constructor__[] = "Initialize the handle by calling constructor function.\n\n        Parameters\n        ----------\n        fconstructor : Function\n            Constructor function.\n\n        args: list of objects\n            The arguments to the constructor\n\n        Note\n        ----\n        We have a special calling convention to call constructor functions.\n        So the return handle is directly set into the Object object\n        instead of creating a new Object.\n        ";
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_5__init_handle_by_constructor__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fconstructor = 0;
  PyObject *__pyx_v_args = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init_handle_by_constructor__ (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fconstructor,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fconstructor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "__init_handle_by_constructor__") < 0)) __PYX_ERR(0, 68, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fconstructor = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init_handle_by_constructor__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 68, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_AddTraceback("dgl._ffi._cy3.core.ObjectBase.__init_handle_by_constructor__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_4__init_handle_by_constructor__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *)__pyx_v_self), __pyx_v_fconstructor, __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_4__init_handle_by_constructor__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self, PyObject *__pyx_v_fconstructor, PyObject *__pyx_v_args) {
  void *__pyx_v_chandle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init_handle_by_constructor__", 0);

  /* "dgl/_ffi/_cython/object.pxi":86
 *         """
 *         cdef void* chandle
 *         ConstructorCall(             # <<<<<<<<<<<<<<
 *             (<FunctionBase>fconstructor).chandle,
 *             kObjectHandle, args, &chandle)
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_ConstructorCall(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_fconstructor)->chandle, __pyx_e_3dgl_4_ffi_4_cy3_4core_kObjectHandle, __pyx_v_args, (&__pyx_v_chandle)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 86, __pyx_L1_error)

  /* "dgl/_ffi/_cython/object.pxi":89
 *             (<FunctionBase>fconstructor).chandle,
 *             kObjectHandle, args, &chandle)
 *         self.chandle = chandle             # <<<<<<<<<<<<<<
 * 
 * _set_class_object_base(ObjectBase)
 */
  __pyx_v_self->chandle = __pyx_v_chandle;

  /* "dgl/_ffi/_cython/object.pxi":68
 *         return make_ret(ret_val, ret_type_code)
 * 
 *     def __init_handle_by_constructor__(self, fconstructor, *args):             # <<<<<<<<<<<<<<
 *         """Initialize the handle by calling constructor function.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dgl._ffi._cy3.core.ObjectBase.__init_handle_by_constructor__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6__reduce_cython__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.ObjectBase.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_8__setstate_cython__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10ObjectBase_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.ObjectBase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":10
 * 
 * 
 * cdef void dgl_callback_finalize(void* fhandle):             # <<<<<<<<<<<<<<
 *     local_pyfunc = <object>(fhandle)
 *     Py_DECREF(local_pyfunc)
 */

static void __pyx_f_3dgl_4_ffi_4_cy3_4core_dgl_callback_finalize(void *__pyx_v_fhandle) {
  PyObject *__pyx_v_local_pyfunc = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dgl_callback_finalize", 0);

  /* "dgl/_ffi/_cython/function.pxi":11
 * 
 * cdef void dgl_callback_finalize(void* fhandle):
 *     local_pyfunc = <object>(fhandle)             # <<<<<<<<<<<<<<
 *     Py_DECREF(local_pyfunc)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_fhandle);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_local_pyfunc = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/function.pxi":12
 * cdef void dgl_callback_finalize(void* fhandle):
 *     local_pyfunc = <object>(fhandle)
 *     Py_DECREF(local_pyfunc)             # <<<<<<<<<<<<<<
 * 
 * cdef int dgl_callback(DGLValue* args,
 */
  Py_DECREF(__pyx_v_local_pyfunc);

  /* "dgl/_ffi/_cython/function.pxi":10
 * 
 * 
 * cdef void dgl_callback_finalize(void* fhandle):             # <<<<<<<<<<<<<<
 *     local_pyfunc = <object>(fhandle)
 *     Py_DECREF(local_pyfunc)
 */

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_local_pyfunc);
  __Pyx_RefNannyFinishContext();
}

/* "dgl/_ffi/_cython/function.pxi":14
 *     Py_DECREF(local_pyfunc)
 * 
 * cdef int dgl_callback(DGLValue* args,             # <<<<<<<<<<<<<<
 *                       int* type_codes,
 *                       int num_args,
 */

static int __pyx_f_3dgl_4_ffi_4_cy3_4core_dgl_callback(DGLValue *__pyx_v_args, int *__pyx_v_type_codes, int __pyx_v_num_args, __pyx_t_3dgl_4_ffi_4_cy3_4core_DGLRetValueHandle __pyx_v_ret, void *__pyx_v_fhandle) {
  PyObject *__pyx_v_pyargs = 0;
  DGLValue __pyx_v_value;
  int __pyx_v_tcode;
  PyObject *__pyx_v_local_pyfunc = NULL;
  int __pyx_v_i;
  PyObject *__pyx_v_rv = NULL;
  PyObject *__pyx_v_msg = NULL;
  PyObject *__pyx_v_temp_args = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  char const *__pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("dgl_callback", 0);

  /* "dgl/_ffi/_cython/function.pxi":22
 *     cdef DGLValue value
 *     cdef int tcode
 *     local_pyfunc = <object>(fhandle)             # <<<<<<<<<<<<<<
 *     pyargs = []
 *     for i in range(num_args):
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_fhandle);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_local_pyfunc = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/function.pxi":23
 *     cdef int tcode
 *     local_pyfunc = <object>(fhandle)
 *     pyargs = []             # <<<<<<<<<<<<<<
 *     for i in range(num_args):
 *         value = args[i]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pyargs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/function.pxi":24
 *     local_pyfunc = <object>(fhandle)
 *     pyargs = []
 *     for i in range(num_args):             # <<<<<<<<<<<<<<
 *         value = args[i]
 *         tcode = type_codes[i]
 */
  __pyx_t_2 = __pyx_v_num_args;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "dgl/_ffi/_cython/function.pxi":25
 *     pyargs = []
 *     for i in range(num_args):
 *         value = args[i]             # <<<<<<<<<<<<<<
 *         tcode = type_codes[i]
 *         if (tcode == kObjectHandle or
 */
    __pyx_v_value = (__pyx_v_args[__pyx_v_i]);

    /* "dgl/_ffi/_cython/function.pxi":26
 *     for i in range(num_args):
 *         value = args[i]
 *         tcode = type_codes[i]             # <<<<<<<<<<<<<<
 *         if (tcode == kObjectHandle or
 *             tcode == kFuncHandle or
 */
    __pyx_v_tcode = (__pyx_v_type_codes[__pyx_v_i]);

    /* "dgl/_ffi/_cython/function.pxi":27
 *         value = args[i]
 *         tcode = type_codes[i]
 *         if (tcode == kObjectHandle or             # <<<<<<<<<<<<<<
 *             tcode == kFuncHandle or
 *             tcode == kModuleHandle or
 */
    __pyx_t_6 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kObjectHandle) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L6_bool_binop_done;
    }

    /* "dgl/_ffi/_cython/function.pxi":28
 *         tcode = type_codes[i]
 *         if (tcode == kObjectHandle or
 *             tcode == kFuncHandle or             # <<<<<<<<<<<<<<
 *             tcode == kModuleHandle or
 *             tcode > kExtBegin):
 */
    __pyx_t_6 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kFuncHandle) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L6_bool_binop_done;
    }

    /* "dgl/_ffi/_cython/function.pxi":29
 *         if (tcode == kObjectHandle or
 *             tcode == kFuncHandle or
 *             tcode == kModuleHandle or             # <<<<<<<<<<<<<<
 *             tcode > kExtBegin):
 *             CALL(DGLCbArgToReturn(&value, tcode))
 */
    __pyx_t_6 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kModuleHandle) != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L6_bool_binop_done;
    }

    /* "dgl/_ffi/_cython/function.pxi":30
 *             tcode == kFuncHandle or
 *             tcode == kModuleHandle or
 *             tcode > kExtBegin):             # <<<<<<<<<<<<<<
 *             CALL(DGLCbArgToReturn(&value, tcode))
 * 
 */
    __pyx_t_6 = ((__pyx_v_tcode > __pyx_e_3dgl_4_ffi_4_cy3_4core_kExtBegin) != 0);
    __pyx_t_5 = __pyx_t_6;
    __pyx_L6_bool_binop_done:;

    /* "dgl/_ffi/_cython/function.pxi":27
 *         value = args[i]
 *         tcode = type_codes[i]
 *         if (tcode == kObjectHandle or             # <<<<<<<<<<<<<<
 *             tcode == kFuncHandle or
 *             tcode == kModuleHandle or
 */
    if (__pyx_t_5) {

      /* "dgl/_ffi/_cython/function.pxi":31
 *             tcode == kModuleHandle or
 *             tcode > kExtBegin):
 *             CALL(DGLCbArgToReturn(&value, tcode))             # <<<<<<<<<<<<<<
 * 
 *         if tcode != kArrayHandle:
 */
      __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLCbArgToReturn((&__pyx_v_value), __pyx_v_tcode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 31, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "dgl/_ffi/_cython/function.pxi":27
 *         value = args[i]
 *         tcode = type_codes[i]
 *         if (tcode == kObjectHandle or             # <<<<<<<<<<<<<<
 *             tcode == kFuncHandle or
 *             tcode == kModuleHandle or
 */
    }

    /* "dgl/_ffi/_cython/function.pxi":33
 *             CALL(DGLCbArgToReturn(&value, tcode))
 * 
 *         if tcode != kArrayHandle:             # <<<<<<<<<<<<<<
 *             pyargs.append(make_ret(value, tcode))
 *         else:
 */
    __pyx_t_5 = ((__pyx_v_tcode != __pyx_e_3dgl_4_ffi_4_cy3_4core_kArrayHandle) != 0);
    if (__pyx_t_5) {

      /* "dgl/_ffi/_cython/function.pxi":34
 * 
 *         if tcode != kArrayHandle:
 *             pyargs.append(make_ret(value, tcode))             # <<<<<<<<<<<<<<
 *         else:
 *             pyargs.append(c_make_array(value.v_handle, True))
 */
      __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_make_ret(__pyx_v_value, __pyx_v_tcode); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 34, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_pyargs, __pyx_t_1); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(2, 34, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "dgl/_ffi/_cython/function.pxi":33
 *             CALL(DGLCbArgToReturn(&value, tcode))
 * 
 *         if tcode != kArrayHandle:             # <<<<<<<<<<<<<<
 *             pyargs.append(make_ret(value, tcode))
 *         else:
 */
      goto __pyx_L10;
    }

    /* "dgl/_ffi/_cython/function.pxi":36
 *             pyargs.append(make_ret(value, tcode))
 *         else:
 *             pyargs.append(c_make_array(value.v_handle, True))             # <<<<<<<<<<<<<<
 *     try:
 *         rv = local_pyfunc(*pyargs)
 */
    /*else*/ {
      __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_c_make_array(__pyx_v_value.v_handle, Py_True); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_pyargs, __pyx_t_1); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(2, 36, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L10:;
  }

  /* "dgl/_ffi/_cython/function.pxi":37
 *         else:
 *             pyargs.append(c_make_array(value.v_handle, True))
 *     try:             # <<<<<<<<<<<<<<
 *         rv = local_pyfunc(*pyargs)
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    /*try:*/ {

      /* "dgl/_ffi/_cython/function.pxi":38
 *             pyargs.append(c_make_array(value.v_handle, True))
 *     try:
 *         rv = local_pyfunc(*pyargs)             # <<<<<<<<<<<<<<
 *     except Exception:
 *         msg = traceback.format_exc()
 */
      __pyx_t_1 = PySequence_Tuple(__pyx_v_pyargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 38, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_v_local_pyfunc, __pyx_t_1, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 38, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_rv = __pyx_t_11;
      __pyx_t_11 = 0;

      /* "dgl/_ffi/_cython/function.pxi":37
 *         else:
 *             pyargs.append(c_make_array(value.v_handle, True))
 *     try:             # <<<<<<<<<<<<<<
 *         rv = local_pyfunc(*pyargs)
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "dgl/_ffi/_cython/function.pxi":39
 *     try:
 *         rv = local_pyfunc(*pyargs)
 *     except Exception:             # <<<<<<<<<<<<<<
 *         msg = traceback.format_exc()
 *         DGLAPISetLastError(c_str(msg))
 */
    __pyx_t_2 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_2) {
      __Pyx_AddTraceback("dgl._ffi._cy3.core.dgl_callback", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_1, &__pyx_t_12) < 0) __PYX_ERR(2, 39, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_12);

      /* "dgl/_ffi/_cython/function.pxi":40
 *         rv = local_pyfunc(*pyargs)
 *     except Exception:
 *         msg = traceback.format_exc()             # <<<<<<<<<<<<<<
 *         DGLAPISetLastError(c_str(msg))
 *         return -1
 */
      __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_traceback); if (unlikely(!__pyx_t_14)) __PYX_ERR(2, 40, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_format_exc); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 40, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
        }
      }
      __pyx_t_13 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 40, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_v_msg = __pyx_t_13;
      __pyx_t_13 = 0;

      /* "dgl/_ffi/_cython/function.pxi":41
 *     except Exception:
 *         msg = traceback.format_exc()
 *         DGLAPISetLastError(c_str(msg))             # <<<<<<<<<<<<<<
 *         return -1
 *     if rv is not None:
 */
      __pyx_t_13 = __pyx_f_3dgl_4_ffi_4_cy3_4core_c_str(__pyx_v_msg); if (unlikely(!__pyx_t_13)) __PYX_ERR(2, 41, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_16 = __Pyx_PyObject_AsString(__pyx_t_13); if (unlikely((!__pyx_t_16) && PyErr_Occurred())) __PYX_ERR(2, 41, __pyx_L13_except_error)
      DGLAPISetLastError(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "dgl/_ffi/_cython/function.pxi":42
 *         msg = traceback.format_exc()
 *         DGLAPISetLastError(c_str(msg))
 *         return -1             # <<<<<<<<<<<<<<
 *     if rv is not None:
 *         if isinstance(rv, tuple):
 */
      __pyx_r = -1;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L14_except_return;
    }
    goto __pyx_L13_except_error;
    __pyx_L13_except_error:;

    /* "dgl/_ffi/_cython/function.pxi":37
 *         else:
 *             pyargs.append(c_make_array(value.v_handle, True))
 *     try:             # <<<<<<<<<<<<<<
 *         rv = local_pyfunc(*pyargs)
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L1_error;
    __pyx_L14_except_return:;
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L0;
    __pyx_L16_try_end:;
  }

  /* "dgl/_ffi/_cython/function.pxi":43
 *         DGLAPISetLastError(c_str(msg))
 *         return -1
 *     if rv is not None:             # <<<<<<<<<<<<<<
 *         if isinstance(rv, tuple):
 *             raise ValueError("PackedFunction can only support one return value")
 */
  __pyx_t_5 = (__pyx_v_rv != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "dgl/_ffi/_cython/function.pxi":44
 *         return -1
 *     if rv is not None:
 *         if isinstance(rv, tuple):             # <<<<<<<<<<<<<<
 *             raise ValueError("PackedFunction can only support one return value")
 *         temp_args = []
 */
    __pyx_t_6 = PyTuple_Check(__pyx_v_rv); 
    __pyx_t_5 = (__pyx_t_6 != 0);
    if (unlikely(__pyx_t_5)) {

      /* "dgl/_ffi/_cython/function.pxi":45
 *     if rv is not None:
 *         if isinstance(rv, tuple):
 *             raise ValueError("PackedFunction can only support one return value")             # <<<<<<<<<<<<<<
 *         temp_args = []
 *         make_arg(rv, &value, &tcode, temp_args)
 */
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 45, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_Raise(__pyx_t_12, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(2, 45, __pyx_L1_error)

      /* "dgl/_ffi/_cython/function.pxi":44
 *         return -1
 *     if rv is not None:
 *         if isinstance(rv, tuple):             # <<<<<<<<<<<<<<
 *             raise ValueError("PackedFunction can only support one return value")
 *         temp_args = []
 */
    }

    /* "dgl/_ffi/_cython/function.pxi":46
 *         if isinstance(rv, tuple):
 *             raise ValueError("PackedFunction can only support one return value")
 *         temp_args = []             # <<<<<<<<<<<<<<
 *         make_arg(rv, &value, &tcode, temp_args)
 *         CALL(DGLCFuncSetReturn(ret, &value, &tcode, 1))
 */
    __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_v_temp_args = ((PyObject*)__pyx_t_12);
    __pyx_t_12 = 0;

    /* "dgl/_ffi/_cython/function.pxi":47
 *             raise ValueError("PackedFunction can only support one return value")
 *         temp_args = []
 *         make_arg(rv, &value, &tcode, temp_args)             # <<<<<<<<<<<<<<
 *         CALL(DGLCFuncSetReturn(ret, &value, &tcode, 1))
 *     return 0
 */
    __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_make_arg(__pyx_v_rv, (&__pyx_v_value), (&__pyx_v_tcode), __pyx_v_temp_args); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(2, 47, __pyx_L1_error)

    /* "dgl/_ffi/_cython/function.pxi":48
 *         temp_args = []
 *         make_arg(rv, &value, &tcode, temp_args)
 *         CALL(DGLCFuncSetReturn(ret, &value, &tcode, 1))             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
    __pyx_t_12 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLCFuncSetReturn(__pyx_v_ret, (&__pyx_v_value), (&__pyx_v_tcode), 1)); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "dgl/_ffi/_cython/function.pxi":43
 *         DGLAPISetLastError(c_str(msg))
 *         return -1
 *     if rv is not None:             # <<<<<<<<<<<<<<
 *         if isinstance(rv, tuple):
 *             raise ValueError("PackedFunction can only support one return value")
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":49
 *         make_arg(rv, &value, &tcode, temp_args)
 *         CALL(DGLCFuncSetReturn(ret, &value, &tcode, 1))
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/function.pxi":14
 *     Py_DECREF(local_pyfunc)
 * 
 * cdef int dgl_callback(DGLValue* args,             # <<<<<<<<<<<<<<
 *                       int* type_codes,
 *                       int num_args,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_WriteUnraisable("dgl._ffi._cy3.core.dgl_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyargs);
  __Pyx_XDECREF(__pyx_v_local_pyfunc);
  __Pyx_XDECREF(__pyx_v_rv);
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_XDECREF(__pyx_v_temp_args);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":52
 * 
 * 
 * def convert_to_dgl_func(object pyfunc):             # <<<<<<<<<<<<<<
 *     """Convert a python function to DGL function
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_3convert_to_dgl_func(PyObject *__pyx_self, PyObject *__pyx_v_pyfunc); /*proto*/
static char __pyx_doc_3dgl_4_ffi_4_cy3_4core_2convert_to_dgl_func[] = "Convert a python function to DGL function\n\n    Parameters\n    ----------\n    pyfunc : python function\n        The python function to be converted.\n\n    Returns\n    -------\n    dglfunc: dgl.Function\n        The converted dgl function.\n    ";
static PyMethodDef __pyx_mdef_3dgl_4_ffi_4_cy3_4core_3convert_to_dgl_func = {"convert_to_dgl_func", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_3convert_to_dgl_func, METH_O, __pyx_doc_3dgl_4_ffi_4_cy3_4core_2convert_to_dgl_func};
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_3convert_to_dgl_func(PyObject *__pyx_self, PyObject *__pyx_v_pyfunc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convert_to_dgl_func (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_2convert_to_dgl_func(__pyx_self, ((PyObject *)__pyx_v_pyfunc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_2convert_to_dgl_func(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_pyfunc) {
  __pyx_t_3dgl_4_ffi_4_cy3_4core_DGLFunctionHandle __pyx_v_chandle;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_to_dgl_func", 0);

  /* "dgl/_ffi/_cython/function.pxi":66
 *     """
 *     cdef DGLFunctionHandle chandle
 *     Py_INCREF(pyfunc)             # <<<<<<<<<<<<<<
 *     CALL(DGLFuncCreateFromCFunc(dgl_callback,
 *                                 <void*>(pyfunc),
 */
  Py_INCREF(__pyx_v_pyfunc);

  /* "dgl/_ffi/_cython/function.pxi":67
 *     cdef DGLFunctionHandle chandle
 *     Py_INCREF(pyfunc)
 *     CALL(DGLFuncCreateFromCFunc(dgl_callback,             # <<<<<<<<<<<<<<
 *                                 <void*>(pyfunc),
 *                                 dgl_callback_finalize,
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLFuncCreateFromCFunc(__pyx_f_3dgl_4_ffi_4_cy3_4core_dgl_callback, ((void *)__pyx_v_pyfunc), __pyx_f_3dgl_4_ffi_4_cy3_4core_dgl_callback_finalize, (&__pyx_v_chandle))); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/function.pxi":71
 *                                 dgl_callback_finalize,
 *                                 &chandle))
 *     ret = _CLASS_FUNCTION(None, False)             # <<<<<<<<<<<<<<
 *     (<FunctionBase>ret).chandle = chandle
 *     return ret
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_CLASS_FUNCTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ret = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/function.pxi":72
 *                                 &chandle))
 *     ret = _CLASS_FUNCTION(None, False)
 *     (<FunctionBase>ret).chandle = chandle             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_ret)->chandle = __pyx_v_chandle;

  /* "dgl/_ffi/_cython/function.pxi":73
 *     ret = _CLASS_FUNCTION(None, False)
 *     (<FunctionBase>ret).chandle = chandle
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/function.pxi":52
 * 
 * 
 * def convert_to_dgl_func(object pyfunc):             # <<<<<<<<<<<<<<
 *     """Convert a python function to DGL function
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.convert_to_dgl_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":76
 * 
 * 
 * cdef inline int make_arg(object arg,             # <<<<<<<<<<<<<<
 *                          DGLValue* value,
 *                          int* tcode,
 */

static CYTHON_INLINE int __pyx_f_3dgl_4_ffi_4_cy3_4core_make_arg(PyObject *__pyx_v_arg, DGLValue *__pyx_v_value, int *__pyx_v_tcode, PyObject *__pyx_v_temp_args) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  PyObject *__pyx_v_tstr = NULL;
  PyObject *__pyx_v_arr = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  void *__pyx_t_3;
  DLTensor *__pyx_t_4;
  enum __pyx_t_3dgl_4_ffi_4_cy3_4core_DGLTypeCode __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  unsigned PY_LONG_LONG __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int64_t __pyx_t_11;
  double __pyx_t_12;
  char const *__pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  Py_ssize_t __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __pyx_t_3dgl_4_ffi_4_cy3_4core_DGLFunctionHandle __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_arg", 0);
  __Pyx_INCREF(__pyx_v_arg);

  /* "dgl/_ffi/_cython/function.pxi":82
 *     """Pack arguments into c args dgl call accept"""
 *     cdef unsigned long long ptr
 *     if isinstance(arg, ObjectBase):             # <<<<<<<<<<<<<<
 *         value[0].v_handle = (<ObjectBase>arg).chandle
 *         tcode[0] = kObjectHandle
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_3dgl_4_ffi_4_cy3_4core_ObjectBase); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/function.pxi":83
 *     cdef unsigned long long ptr
 *     if isinstance(arg, ObjectBase):
 *         value[0].v_handle = (<ObjectBase>arg).chandle             # <<<<<<<<<<<<<<
 *         tcode[0] = kObjectHandle
 *     elif isinstance(arg, NDArrayBase):
 */
    __pyx_t_3 = ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *)__pyx_v_arg)->chandle;
    (__pyx_v_value[0]).v_handle = __pyx_t_3;

    /* "dgl/_ffi/_cython/function.pxi":84
 *     if isinstance(arg, ObjectBase):
 *         value[0].v_handle = (<ObjectBase>arg).chandle
 *         tcode[0] = kObjectHandle             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, NDArrayBase):
 *         value[0].v_handle = (<NDArrayBase>arg).chandle
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kObjectHandle;

    /* "dgl/_ffi/_cython/function.pxi":82
 *     """Pack arguments into c args dgl call accept"""
 *     cdef unsigned long long ptr
 *     if isinstance(arg, ObjectBase):             # <<<<<<<<<<<<<<
 *         value[0].v_handle = (<ObjectBase>arg).chandle
 *         tcode[0] = kObjectHandle
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":85
 *         value[0].v_handle = (<ObjectBase>arg).chandle
 *         tcode[0] = kObjectHandle
 *     elif isinstance(arg, NDArrayBase):             # <<<<<<<<<<<<<<
 *         value[0].v_handle = (<NDArrayBase>arg).chandle
 *         tcode[0] = (kNDArrayContainer if
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_3dgl_4_ffi_4_cy3_4core_NDArrayBase); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":86
 *         tcode[0] = kObjectHandle
 *     elif isinstance(arg, NDArrayBase):
 *         value[0].v_handle = (<NDArrayBase>arg).chandle             # <<<<<<<<<<<<<<
 *         tcode[0] = (kNDArrayContainer if
 *                     not (<NDArrayBase>arg).c_is_view else kArrayHandle)
 */
    __pyx_t_4 = ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)__pyx_v_arg)->chandle;
    (__pyx_v_value[0]).v_handle = __pyx_t_4;

    /* "dgl/_ffi/_cython/function.pxi":88
 *         value[0].v_handle = (<NDArrayBase>arg).chandle
 *         tcode[0] = (kNDArrayContainer if
 *                     not (<NDArrayBase>arg).c_is_view else kArrayHandle)             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, _DGL_COMPATS):
 *         ptr = arg._dgl_handle
 */
    if (((!(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)__pyx_v_arg)->c_is_view != 0)) != 0)) {

      /* "dgl/_ffi/_cython/function.pxi":87
 *     elif isinstance(arg, NDArrayBase):
 *         value[0].v_handle = (<NDArrayBase>arg).chandle
 *         tcode[0] = (kNDArrayContainer if             # <<<<<<<<<<<<<<
 *                     not (<NDArrayBase>arg).c_is_view else kArrayHandle)
 *     elif isinstance(arg, _DGL_COMPATS):
 */
      __pyx_t_5 = __pyx_e_3dgl_4_ffi_4_cy3_4core_kNDArrayContainer;
    } else {

      /* "dgl/_ffi/_cython/function.pxi":88
 *         value[0].v_handle = (<NDArrayBase>arg).chandle
 *         tcode[0] = (kNDArrayContainer if
 *                     not (<NDArrayBase>arg).c_is_view else kArrayHandle)             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, _DGL_COMPATS):
 *         ptr = arg._dgl_handle
 */
      __pyx_t_5 = __pyx_e_3dgl_4_ffi_4_cy3_4core_kArrayHandle;
    }

    /* "dgl/_ffi/_cython/function.pxi":87
 *     elif isinstance(arg, NDArrayBase):
 *         value[0].v_handle = (<NDArrayBase>arg).chandle
 *         tcode[0] = (kNDArrayContainer if             # <<<<<<<<<<<<<<
 *                     not (<NDArrayBase>arg).c_is_view else kArrayHandle)
 *     elif isinstance(arg, _DGL_COMPATS):
 */
    (__pyx_v_tcode[0]) = __pyx_t_5;

    /* "dgl/_ffi/_cython/function.pxi":85
 *         value[0].v_handle = (<ObjectBase>arg).chandle
 *         tcode[0] = kObjectHandle
 *     elif isinstance(arg, NDArrayBase):             # <<<<<<<<<<<<<<
 *         value[0].v_handle = (<NDArrayBase>arg).chandle
 *         tcode[0] = (kNDArrayContainer if
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":89
 *         tcode[0] = (kNDArrayContainer if
 *                     not (<NDArrayBase>arg).c_is_view else kArrayHandle)
 *     elif isinstance(arg, _DGL_COMPATS):             # <<<<<<<<<<<<<<
 *         ptr = arg._dgl_handle
 *         value[0].v_handle = (<void*>ptr)
 */
  __pyx_t_6 = __pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_COMPATS;
  __Pyx_INCREF(__pyx_t_6);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_6); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/function.pxi":90
 *                     not (<NDArrayBase>arg).c_is_view else kArrayHandle)
 *     elif isinstance(arg, _DGL_COMPATS):
 *         ptr = arg._dgl_handle             # <<<<<<<<<<<<<<
 *         value[0].v_handle = (<void*>ptr)
 *         tcode[0] = arg.__class__._dgl_tcode
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_dgl_handle); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_6); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(2, 90, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_ptr = __pyx_t_7;

    /* "dgl/_ffi/_cython/function.pxi":91
 *     elif isinstance(arg, _DGL_COMPATS):
 *         ptr = arg._dgl_handle
 *         value[0].v_handle = (<void*>ptr)             # <<<<<<<<<<<<<<
 *         tcode[0] = arg.__class__._dgl_tcode
 *     elif isinstance(arg, (int, long)):
 */
    (__pyx_v_value[0]).v_handle = ((void *)__pyx_v_ptr);

    /* "dgl/_ffi/_cython/function.pxi":92
 *         ptr = arg._dgl_handle
 *         value[0].v_handle = (<void*>ptr)
 *         tcode[0] = arg.__class__._dgl_tcode             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, (int, long)):
 *         value[0].v_int64 = arg
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_class); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_dgl_tcode); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 92, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    (__pyx_v_tcode[0]) = __pyx_t_9;

    /* "dgl/_ffi/_cython/function.pxi":89
 *         tcode[0] = (kNDArrayContainer if
 *                     not (<NDArrayBase>arg).c_is_view else kArrayHandle)
 *     elif isinstance(arg, _DGL_COMPATS):             # <<<<<<<<<<<<<<
 *         ptr = arg._dgl_handle
 *         value[0].v_handle = (<void*>ptr)
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":93
 *         value[0].v_handle = (<void*>ptr)
 *         tcode[0] = arg.__class__._dgl_tcode
 *     elif isinstance(arg, (int, long)):             # <<<<<<<<<<<<<<
 *         value[0].v_int64 = arg
 *         tcode[0] = kInt
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_arg); 
  __pyx_t_10 = (__pyx_t_1 != 0);
  if (!__pyx_t_10) {
  } else {
    __pyx_t_2 = __pyx_t_10;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_10 = PyLong_Check(__pyx_v_arg); 
  __pyx_t_1 = (__pyx_t_10 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L4_bool_binop_done:;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":94
 *         tcode[0] = arg.__class__._dgl_tcode
 *     elif isinstance(arg, (int, long)):
 *         value[0].v_int64 = arg             # <<<<<<<<<<<<<<
 *         tcode[0] = kInt
 *     elif isinstance(arg, float):
 */
    __pyx_t_11 = __Pyx_PyInt_As_int64_t(__pyx_v_arg); if (unlikely((__pyx_t_11 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(2, 94, __pyx_L1_error)
    (__pyx_v_value[0]).v_int64 = __pyx_t_11;

    /* "dgl/_ffi/_cython/function.pxi":95
 *     elif isinstance(arg, (int, long)):
 *         value[0].v_int64 = arg
 *         tcode[0] = kInt             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, float):
 *         value[0].v_float64 = arg
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kInt;

    /* "dgl/_ffi/_cython/function.pxi":93
 *         value[0].v_handle = (<void*>ptr)
 *         tcode[0] = arg.__class__._dgl_tcode
 *     elif isinstance(arg, (int, long)):             # <<<<<<<<<<<<<<
 *         value[0].v_int64 = arg
 *         tcode[0] = kInt
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":96
 *         value[0].v_int64 = arg
 *         tcode[0] = kInt
 *     elif isinstance(arg, float):             # <<<<<<<<<<<<<<
 *         value[0].v_float64 = arg
 *         tcode[0] = kFloat
 */
  __pyx_t_1 = PyFloat_Check(__pyx_v_arg); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/function.pxi":97
 *         tcode[0] = kInt
 *     elif isinstance(arg, float):
 *         value[0].v_float64 = arg             # <<<<<<<<<<<<<<
 *         tcode[0] = kFloat
 *     elif isinstance(arg, str):
 */
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_arg); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 97, __pyx_L1_error)
    (__pyx_v_value[0]).v_float64 = __pyx_t_12;

    /* "dgl/_ffi/_cython/function.pxi":98
 *     elif isinstance(arg, float):
 *         value[0].v_float64 = arg
 *         tcode[0] = kFloat             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, str):
 *         tstr = c_str(arg)
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kFloat;

    /* "dgl/_ffi/_cython/function.pxi":96
 *         value[0].v_int64 = arg
 *         tcode[0] = kInt
 *     elif isinstance(arg, float):             # <<<<<<<<<<<<<<
 *         value[0].v_float64 = arg
 *         tcode[0] = kFloat
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":99
 *         value[0].v_float64 = arg
 *         tcode[0] = kFloat
 *     elif isinstance(arg, str):             # <<<<<<<<<<<<<<
 *         tstr = c_str(arg)
 *         value[0].v_str = tstr
 */
  __pyx_t_2 = PyString_Check(__pyx_v_arg); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":100
 *         tcode[0] = kFloat
 *     elif isinstance(arg, str):
 *         tstr = c_str(arg)             # <<<<<<<<<<<<<<
 *         value[0].v_str = tstr
 *         tcode[0] = kStr
 */
    __pyx_t_8 = __pyx_f_3dgl_4_ffi_4_cy3_4core_c_str(__pyx_v_arg); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_v_tstr = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "dgl/_ffi/_cython/function.pxi":101
 *     elif isinstance(arg, str):
 *         tstr = c_str(arg)
 *         value[0].v_str = tstr             # <<<<<<<<<<<<<<
 *         tcode[0] = kStr
 *         temp_args.append(tstr)
 */
    __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_tstr); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(2, 101, __pyx_L1_error)
    (__pyx_v_value[0]).v_str = __pyx_t_13;

    /* "dgl/_ffi/_cython/function.pxi":102
 *         tstr = c_str(arg)
 *         value[0].v_str = tstr
 *         tcode[0] = kStr             # <<<<<<<<<<<<<<
 *         temp_args.append(tstr)
 *     elif arg is None:
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kStr;

    /* "dgl/_ffi/_cython/function.pxi":103
 *         value[0].v_str = tstr
 *         tcode[0] = kStr
 *         temp_args.append(tstr)             # <<<<<<<<<<<<<<
 *     elif arg is None:
 *         value[0].v_handle = NULL
 */
    if (unlikely(__pyx_v_temp_args == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(2, 103, __pyx_L1_error)
    }
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_temp_args, __pyx_v_tstr); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(2, 103, __pyx_L1_error)

    /* "dgl/_ffi/_cython/function.pxi":99
 *         value[0].v_float64 = arg
 *         tcode[0] = kFloat
 *     elif isinstance(arg, str):             # <<<<<<<<<<<<<<
 *         tstr = c_str(arg)
 *         value[0].v_str = tstr
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":104
 *         tcode[0] = kStr
 *         temp_args.append(tstr)
 *     elif arg is None:             # <<<<<<<<<<<<<<
 *         value[0].v_handle = NULL
 *         tcode[0] = kNull
 */
  __pyx_t_1 = (__pyx_v_arg == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/function.pxi":105
 *         temp_args.append(tstr)
 *     elif arg is None:
 *         value[0].v_handle = NULL             # <<<<<<<<<<<<<<
 *         tcode[0] = kNull
 *     elif isinstance(arg, Number):
 */
    (__pyx_v_value[0]).v_handle = NULL;

    /* "dgl/_ffi/_cython/function.pxi":106
 *     elif arg is None:
 *         value[0].v_handle = NULL
 *         tcode[0] = kNull             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, Number):
 *         value[0].v_float64 = arg
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kNull;

    /* "dgl/_ffi/_cython/function.pxi":104
 *         tcode[0] = kStr
 *         temp_args.append(tstr)
 *     elif arg is None:             # <<<<<<<<<<<<<<
 *         value[0].v_handle = NULL
 *         tcode[0] = kNull
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":107
 *         value[0].v_handle = NULL
 *         tcode[0] = kNull
 *     elif isinstance(arg, Number):             # <<<<<<<<<<<<<<
 *         value[0].v_float64 = arg
 *         tcode[0] = kFloat
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_Number); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_8); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(2, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":108
 *         tcode[0] = kNull
 *     elif isinstance(arg, Number):
 *         value[0].v_float64 = arg             # <<<<<<<<<<<<<<
 *         tcode[0] = kFloat
 *     elif isinstance(arg, DGLType):
 */
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_arg); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 108, __pyx_L1_error)
    (__pyx_v_value[0]).v_float64 = __pyx_t_12;

    /* "dgl/_ffi/_cython/function.pxi":109
 *     elif isinstance(arg, Number):
 *         value[0].v_float64 = arg
 *         tcode[0] = kFloat             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, DGLType):
 *         tstr = c_str(str(arg))
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kFloat;

    /* "dgl/_ffi/_cython/function.pxi":107
 *         value[0].v_handle = NULL
 *         tcode[0] = kNull
 *     elif isinstance(arg, Number):             # <<<<<<<<<<<<<<
 *         value[0].v_float64 = arg
 *         tcode[0] = kFloat
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":110
 *         value[0].v_float64 = arg
 *         tcode[0] = kFloat
 *     elif isinstance(arg, DGLType):             # <<<<<<<<<<<<<<
 *         tstr = c_str(str(arg))
 *         value[0].v_str = tstr
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_DGLType); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_8); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/function.pxi":111
 *         tcode[0] = kFloat
 *     elif isinstance(arg, DGLType):
 *         tstr = c_str(str(arg))             # <<<<<<<<<<<<<<
 *         value[0].v_str = tstr
 *         tcode[0] = kStr
 */
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_arg); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = __pyx_f_3dgl_4_ffi_4_cy3_4core_c_str(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_tstr = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "dgl/_ffi/_cython/function.pxi":112
 *     elif isinstance(arg, DGLType):
 *         tstr = c_str(str(arg))
 *         value[0].v_str = tstr             # <<<<<<<<<<<<<<
 *         tcode[0] = kStr
 *         temp_args.append(tstr)
 */
    __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_tstr); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(2, 112, __pyx_L1_error)
    (__pyx_v_value[0]).v_str = __pyx_t_13;

    /* "dgl/_ffi/_cython/function.pxi":113
 *         tstr = c_str(str(arg))
 *         value[0].v_str = tstr
 *         tcode[0] = kStr             # <<<<<<<<<<<<<<
 *         temp_args.append(tstr)
 *     elif isinstance(arg, DGLContext):
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kStr;

    /* "dgl/_ffi/_cython/function.pxi":114
 *         value[0].v_str = tstr
 *         tcode[0] = kStr
 *         temp_args.append(tstr)             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, DGLContext):
 *         value[0].v_ctx = (<DLContext*>(
 */
    if (unlikely(__pyx_v_temp_args == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(2, 114, __pyx_L1_error)
    }
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_temp_args, __pyx_v_tstr); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(2, 114, __pyx_L1_error)

    /* "dgl/_ffi/_cython/function.pxi":110
 *         value[0].v_float64 = arg
 *         tcode[0] = kFloat
 *     elif isinstance(arg, DGLType):             # <<<<<<<<<<<<<<
 *         tstr = c_str(str(arg))
 *         value[0].v_str = tstr
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":115
 *         tcode[0] = kStr
 *         temp_args.append(tstr)
 *     elif isinstance(arg, DGLContext):             # <<<<<<<<<<<<<<
 *         value[0].v_ctx = (<DLContext*>(
 *             <unsigned long long>ctypes.addressof(arg)))[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_DGLContext); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_6); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(2, 115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":117
 *     elif isinstance(arg, DGLContext):
 *         value[0].v_ctx = (<DLContext*>(
 *             <unsigned long long>ctypes.addressof(arg)))[0]             # <<<<<<<<<<<<<<
 *         tcode[0] = kDGLContext
 *     elif isinstance(arg, bytearray):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_addressof); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_15, __pyx_t_8, __pyx_v_arg) : __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_arg);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_6); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(2, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "dgl/_ffi/_cython/function.pxi":116
 *         temp_args.append(tstr)
 *     elif isinstance(arg, DGLContext):
 *         value[0].v_ctx = (<DLContext*>(             # <<<<<<<<<<<<<<
 *             <unsigned long long>ctypes.addressof(arg)))[0]
 *         tcode[0] = kDGLContext
 */
    (__pyx_v_value[0]).v_ctx = (((DLContext *)((unsigned PY_LONG_LONG)__pyx_t_7))[0]);

    /* "dgl/_ffi/_cython/function.pxi":118
 *         value[0].v_ctx = (<DLContext*>(
 *             <unsigned long long>ctypes.addressof(arg)))[0]
 *         tcode[0] = kDGLContext             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, bytearray):
 *         arr = DGLByteArray()
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kDGLContext;

    /* "dgl/_ffi/_cython/function.pxi":115
 *         tcode[0] = kStr
 *         temp_args.append(tstr)
 *     elif isinstance(arg, DGLContext):             # <<<<<<<<<<<<<<
 *         value[0].v_ctx = (<DLContext*>(
 *             <unsigned long long>ctypes.addressof(arg)))[0]
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":119
 *             <unsigned long long>ctypes.addressof(arg)))[0]
 *         tcode[0] = kDGLContext
 *     elif isinstance(arg, bytearray):             # <<<<<<<<<<<<<<
 *         arr = DGLByteArray()
 *         arr.data = ctypes.cast(
 */
  __pyx_t_1 = PyByteArray_Check(__pyx_v_arg); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/function.pxi":120
 *         tcode[0] = kDGLContext
 *     elif isinstance(arg, bytearray):
 *         arr = DGLByteArray()             # <<<<<<<<<<<<<<
 *         arr.data = ctypes.cast(
 *             (ctypes.c_byte * len(arg)).from_buffer(arg),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_DGLByteArray); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_15);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_15, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_15);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_v_arr = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "dgl/_ffi/_cython/function.pxi":121
 *     elif isinstance(arg, bytearray):
 *         arr = DGLByteArray()
 *         arr.data = ctypes.cast(             # <<<<<<<<<<<<<<
 *             (ctypes.c_byte * len(arg)).from_buffer(arg),
 *             ctypes.POINTER(ctypes.c_byte))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_cast); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

    /* "dgl/_ffi/_cython/function.pxi":122
 *         arr = DGLByteArray()
 *         arr.data = ctypes.cast(
 *             (ctypes.c_byte * len(arg)).from_buffer(arg),             # <<<<<<<<<<<<<<
 *             ctypes.POINTER(ctypes.c_byte))
 *         arr.size = len(arg)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_c_byte); if (unlikely(!__pyx_t_17)) __PYX_ERR(2, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_18 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_18 == ((Py_ssize_t)-1))) __PYX_ERR(2, 122, __pyx_L1_error)
    __pyx_t_16 = PyInt_FromSsize_t(__pyx_t_18); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_19 = PyNumber_Multiply(__pyx_t_17, __pyx_t_16); if (unlikely(!__pyx_t_19)) __PYX_ERR(2, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_from_buffer); if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    __pyx_t_15 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_16, __pyx_t_19, __pyx_v_arg) : __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_v_arg);
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (unlikely(!__pyx_t_15)) __PYX_ERR(2, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

    /* "dgl/_ffi/_cython/function.pxi":123
 *         arr.data = ctypes.cast(
 *             (ctypes.c_byte * len(arg)).from_buffer(arg),
 *             ctypes.POINTER(ctypes.c_byte))             # <<<<<<<<<<<<<<
 *         arr.size = len(arg)
 *         value[0].v_handle = <void*>(
 */
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_19)) __PYX_ERR(2, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_POINTER); if (unlikely(!__pyx_t_17)) __PYX_ERR(2, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_19)) __PYX_ERR(2, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_c_byte); if (unlikely(!__pyx_t_20)) __PYX_ERR(2, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    __pyx_t_19 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_17);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_17, function);
      }
    }
    __pyx_t_16 = (__pyx_t_19) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_19, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_20);
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(2, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 121, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_t_15, __pyx_t_16};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 121, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else
    #endif
    {
      __pyx_t_20 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_20)) __PYX_ERR(2, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__pyx_t_17) {
        __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_17); __pyx_t_17 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_9, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_9, __pyx_t_16);
      __pyx_t_15 = 0;
      __pyx_t_16 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_20, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 121, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "dgl/_ffi/_cython/function.pxi":121
 *     elif isinstance(arg, bytearray):
 *         arr = DGLByteArray()
 *         arr.data = ctypes.cast(             # <<<<<<<<<<<<<<
 *             (ctypes.c_byte * len(arg)).from_buffer(arg),
 *             ctypes.POINTER(ctypes.c_byte))
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_arr, __pyx_n_s_data, __pyx_t_6) < 0) __PYX_ERR(2, 121, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "dgl/_ffi/_cython/function.pxi":124
 *             (ctypes.c_byte * len(arg)).from_buffer(arg),
 *             ctypes.POINTER(ctypes.c_byte))
 *         arr.size = len(arg)             # <<<<<<<<<<<<<<
 *         value[0].v_handle = <void*>(
 *             <unsigned long long>ctypes.addressof(arr))
 */
    __pyx_t_18 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_18 == ((Py_ssize_t)-1))) __PYX_ERR(2, 124, __pyx_L1_error)
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_t_18); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_arr, __pyx_n_s_size, __pyx_t_6) < 0) __PYX_ERR(2, 124, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "dgl/_ffi/_cython/function.pxi":126
 *         arr.size = len(arg)
 *         value[0].v_handle = <void*>(
 *             <unsigned long long>ctypes.addressof(arr))             # <<<<<<<<<<<<<<
 *         tcode[0] = kBytes
 *         temp_args.append(arr)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_addressof); if (unlikely(!__pyx_t_20)) __PYX_ERR(2, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_20))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_20);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_20, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_20, __pyx_t_8, __pyx_v_arr) : __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_v_arr);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_6); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(2, 126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "dgl/_ffi/_cython/function.pxi":125
 *             ctypes.POINTER(ctypes.c_byte))
 *         arr.size = len(arg)
 *         value[0].v_handle = <void*>(             # <<<<<<<<<<<<<<
 *             <unsigned long long>ctypes.addressof(arr))
 *         tcode[0] = kBytes
 */
    (__pyx_v_value[0]).v_handle = ((void *)((unsigned PY_LONG_LONG)__pyx_t_7));

    /* "dgl/_ffi/_cython/function.pxi":127
 *         value[0].v_handle = <void*>(
 *             <unsigned long long>ctypes.addressof(arr))
 *         tcode[0] = kBytes             # <<<<<<<<<<<<<<
 *         temp_args.append(arr)
 *     elif isinstance(arg, string_types):
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kBytes;

    /* "dgl/_ffi/_cython/function.pxi":128
 *             <unsigned long long>ctypes.addressof(arr))
 *         tcode[0] = kBytes
 *         temp_args.append(arr)             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, string_types):
 *         tstr = c_str(arg)
 */
    if (unlikely(__pyx_v_temp_args == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(2, 128, __pyx_L1_error)
    }
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_temp_args, __pyx_v_arr); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(2, 128, __pyx_L1_error)

    /* "dgl/_ffi/_cython/function.pxi":119
 *             <unsigned long long>ctypes.addressof(arg)))[0]
 *         tcode[0] = kDGLContext
 *     elif isinstance(arg, bytearray):             # <<<<<<<<<<<<<<
 *         arr = DGLByteArray()
 *         arr.data = ctypes.cast(
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":129
 *         tcode[0] = kBytes
 *         temp_args.append(arr)
 *     elif isinstance(arg, string_types):             # <<<<<<<<<<<<<<
 *         tstr = c_str(arg)
 *         value[0].v_str = tstr
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_string_types); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_6); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(2, 129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":130
 *         temp_args.append(arr)
 *     elif isinstance(arg, string_types):
 *         tstr = c_str(arg)             # <<<<<<<<<<<<<<
 *         value[0].v_str = tstr
 *         tcode[0] = kStr
 */
    __pyx_t_6 = __pyx_f_3dgl_4_ffi_4_cy3_4core_c_str(__pyx_v_arg); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_tstr = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "dgl/_ffi/_cython/function.pxi":131
 *     elif isinstance(arg, string_types):
 *         tstr = c_str(arg)
 *         value[0].v_str = tstr             # <<<<<<<<<<<<<<
 *         tcode[0] = kStr
 *         temp_args.append(tstr)
 */
    __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_tstr); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(2, 131, __pyx_L1_error)
    (__pyx_v_value[0]).v_str = __pyx_t_13;

    /* "dgl/_ffi/_cython/function.pxi":132
 *         tstr = c_str(arg)
 *         value[0].v_str = tstr
 *         tcode[0] = kStr             # <<<<<<<<<<<<<<
 *         temp_args.append(tstr)
 *     elif isinstance(arg, (list, tuple, dict, ObjectGeneric)):
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kStr;

    /* "dgl/_ffi/_cython/function.pxi":133
 *         value[0].v_str = tstr
 *         tcode[0] = kStr
 *         temp_args.append(tstr)             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, (list, tuple, dict, ObjectGeneric)):
 *         arg = convert_to_object(arg)
 */
    if (unlikely(__pyx_v_temp_args == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(2, 133, __pyx_L1_error)
    }
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_temp_args, __pyx_v_tstr); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(2, 133, __pyx_L1_error)

    /* "dgl/_ffi/_cython/function.pxi":129
 *         tcode[0] = kBytes
 *         temp_args.append(arr)
 *     elif isinstance(arg, string_types):             # <<<<<<<<<<<<<<
 *         tstr = c_str(arg)
 *         value[0].v_str = tstr
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":134
 *         tcode[0] = kStr
 *         temp_args.append(tstr)
 *     elif isinstance(arg, (list, tuple, dict, ObjectGeneric)):             # <<<<<<<<<<<<<<
 *         arg = convert_to_object(arg)
 *         value[0].v_handle = (<ObjectBase>arg).chandle
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ObjectGeneric); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyList_Check(__pyx_v_arg); 
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (!__pyx_t_10) {
  } else {
    __pyx_t_1 = __pyx_t_10;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_10 = PyTuple_Check(__pyx_v_arg); 
  __pyx_t_2 = (__pyx_t_10 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_2 = PyDict_Check(__pyx_v_arg); 
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (!__pyx_t_10) {
  } else {
    __pyx_t_1 = __pyx_t_10;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_10 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_6); 
  __pyx_t_2 = (__pyx_t_10 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/function.pxi":135
 *         temp_args.append(tstr)
 *     elif isinstance(arg, (list, tuple, dict, ObjectGeneric)):
 *         arg = convert_to_object(arg)             # <<<<<<<<<<<<<<
 *         value[0].v_handle = (<ObjectBase>arg).chandle
 *         tcode[0] = kObjectHandle
 */
    __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_convert_to_object); if (unlikely(!__pyx_t_20)) __PYX_ERR(2, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_20))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_20);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_20, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_20, __pyx_t_8, __pyx_v_arg) : __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_v_arg);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF_SET(__pyx_v_arg, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "dgl/_ffi/_cython/function.pxi":136
 *     elif isinstance(arg, (list, tuple, dict, ObjectGeneric)):
 *         arg = convert_to_object(arg)
 *         value[0].v_handle = (<ObjectBase>arg).chandle             # <<<<<<<<<<<<<<
 *         tcode[0] = kObjectHandle
 *         temp_args.append(arg)
 */
    __pyx_t_3 = ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *)__pyx_v_arg)->chandle;
    (__pyx_v_value[0]).v_handle = __pyx_t_3;

    /* "dgl/_ffi/_cython/function.pxi":137
 *         arg = convert_to_object(arg)
 *         value[0].v_handle = (<ObjectBase>arg).chandle
 *         tcode[0] = kObjectHandle             # <<<<<<<<<<<<<<
 *         temp_args.append(arg)
 *     #elif isinstance(arg, _CLASS_MODULE):
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kObjectHandle;

    /* "dgl/_ffi/_cython/function.pxi":138
 *         value[0].v_handle = (<ObjectBase>arg).chandle
 *         tcode[0] = kObjectHandle
 *         temp_args.append(arg)             # <<<<<<<<<<<<<<
 *     #elif isinstance(arg, _CLASS_MODULE):
 *     #    value[0].v_handle = c_handle(arg.handle)
 */
    if (unlikely(__pyx_v_temp_args == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(2, 138, __pyx_L1_error)
    }
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_temp_args, __pyx_v_arg); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(2, 138, __pyx_L1_error)

    /* "dgl/_ffi/_cython/function.pxi":134
 *         tcode[0] = kStr
 *         temp_args.append(tstr)
 *     elif isinstance(arg, (list, tuple, dict, ObjectGeneric)):             # <<<<<<<<<<<<<<
 *         arg = convert_to_object(arg)
 *         value[0].v_handle = (<ObjectBase>arg).chandle
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":142
 *     #    value[0].v_handle = c_handle(arg.handle)
 *     #    tcode[0] = kModuleHandle
 *     elif isinstance(arg, FunctionBase):             # <<<<<<<<<<<<<<
 *         value[0].v_handle = (<FunctionBase>arg).chandle
 *         tcode[0] = kFuncHandle
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_ptype_3dgl_4_ffi_4_cy3_4core_FunctionBase); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":143
 *     #    tcode[0] = kModuleHandle
 *     elif isinstance(arg, FunctionBase):
 *         value[0].v_handle = (<FunctionBase>arg).chandle             # <<<<<<<<<<<<<<
 *         tcode[0] = kFuncHandle
 *     elif isinstance(arg, ctypes.c_void_p):
 */
    __pyx_t_21 = ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_arg)->chandle;
    (__pyx_v_value[0]).v_handle = __pyx_t_21;

    /* "dgl/_ffi/_cython/function.pxi":144
 *     elif isinstance(arg, FunctionBase):
 *         value[0].v_handle = (<FunctionBase>arg).chandle
 *         tcode[0] = kFuncHandle             # <<<<<<<<<<<<<<
 *     elif isinstance(arg, ctypes.c_void_p):
 *         value[0].v_handle = c_handle(arg)
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kFuncHandle;

    /* "dgl/_ffi/_cython/function.pxi":142
 *     #    value[0].v_handle = c_handle(arg.handle)
 *     #    tcode[0] = kModuleHandle
 *     elif isinstance(arg, FunctionBase):             # <<<<<<<<<<<<<<
 *         value[0].v_handle = (<FunctionBase>arg).chandle
 *         tcode[0] = kFuncHandle
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":145
 *         value[0].v_handle = (<FunctionBase>arg).chandle
 *         tcode[0] = kFuncHandle
 *     elif isinstance(arg, ctypes.c_void_p):             # <<<<<<<<<<<<<<
 *         value[0].v_handle = c_handle(arg)
 *         tcode[0] = kHandle
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_20)) __PYX_ERR(2, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_20); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/function.pxi":146
 *         tcode[0] = kFuncHandle
 *     elif isinstance(arg, ctypes.c_void_p):
 *         value[0].v_handle = c_handle(arg)             # <<<<<<<<<<<<<<
 *         tcode[0] = kHandle
 *     elif callable(arg):
 */
    (__pyx_v_value[0]).v_handle = __pyx_f_3dgl_4_ffi_4_cy3_4core_c_handle(__pyx_v_arg);

    /* "dgl/_ffi/_cython/function.pxi":147
 *     elif isinstance(arg, ctypes.c_void_p):
 *         value[0].v_handle = c_handle(arg)
 *         tcode[0] = kHandle             # <<<<<<<<<<<<<<
 *     elif callable(arg):
 *         arg = convert_to_dgl_func(arg)
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kHandle;

    /* "dgl/_ffi/_cython/function.pxi":145
 *         value[0].v_handle = (<FunctionBase>arg).chandle
 *         tcode[0] = kFuncHandle
 *     elif isinstance(arg, ctypes.c_void_p):             # <<<<<<<<<<<<<<
 *         value[0].v_handle = c_handle(arg)
 *         tcode[0] = kHandle
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":148
 *         value[0].v_handle = c_handle(arg)
 *         tcode[0] = kHandle
 *     elif callable(arg):             # <<<<<<<<<<<<<<
 *         arg = convert_to_dgl_func(arg)
 *         value[0].v_handle = (<FunctionBase>arg).chandle
 */
  __pyx_t_2 = __Pyx_PyCallable_Check(__pyx_v_arg); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(2, 148, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "dgl/_ffi/_cython/function.pxi":149
 *         tcode[0] = kHandle
 *     elif callable(arg):
 *         arg = convert_to_dgl_func(arg)             # <<<<<<<<<<<<<<
 *         value[0].v_handle = (<FunctionBase>arg).chandle
 *         tcode[0] = kFuncHandle
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_convert_to_dgl_func); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_20 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_8, __pyx_v_arg) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_arg);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_20)) __PYX_ERR(2, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_arg, __pyx_t_20);
    __pyx_t_20 = 0;

    /* "dgl/_ffi/_cython/function.pxi":150
 *     elif callable(arg):
 *         arg = convert_to_dgl_func(arg)
 *         value[0].v_handle = (<FunctionBase>arg).chandle             # <<<<<<<<<<<<<<
 *         tcode[0] = kFuncHandle
 *         temp_args.append(arg)
 */
    __pyx_t_21 = ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_arg)->chandle;
    (__pyx_v_value[0]).v_handle = __pyx_t_21;

    /* "dgl/_ffi/_cython/function.pxi":151
 *         arg = convert_to_dgl_func(arg)
 *         value[0].v_handle = (<FunctionBase>arg).chandle
 *         tcode[0] = kFuncHandle             # <<<<<<<<<<<<<<
 *         temp_args.append(arg)
 *     else:
 */
    (__pyx_v_tcode[0]) = __pyx_e_3dgl_4_ffi_4_cy3_4core_kFuncHandle;

    /* "dgl/_ffi/_cython/function.pxi":152
 *         value[0].v_handle = (<FunctionBase>arg).chandle
 *         tcode[0] = kFuncHandle
 *         temp_args.append(arg)             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError("Don't know how to handle type %s" % type(arg))
 */
    if (unlikely(__pyx_v_temp_args == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
      __PYX_ERR(2, 152, __pyx_L1_error)
    }
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_temp_args, __pyx_v_arg); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(2, 152, __pyx_L1_error)

    /* "dgl/_ffi/_cython/function.pxi":148
 *         value[0].v_handle = c_handle(arg)
 *         tcode[0] = kHandle
 *     elif callable(arg):             # <<<<<<<<<<<<<<
 *         arg = convert_to_dgl_func(arg)
 *         value[0].v_handle = (<FunctionBase>arg).chandle
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":154
 *         temp_args.append(arg)
 *     else:
 *         raise TypeError("Don't know how to handle type %s" % type(arg))             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  /*else*/ {
    __pyx_t_20 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Don_t_know_how_to_handle_type_s, ((PyObject *)Py_TYPE(__pyx_v_arg))); if (unlikely(!__pyx_t_20)) __PYX_ERR(2, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_20); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(2, 154, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "dgl/_ffi/_cython/function.pxi":155
 *     else:
 *         raise TypeError("Don't know how to handle type %s" % type(arg))
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline bytearray make_ret_bytes(void* chandle):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/function.pxi":76
 * 
 * 
 * cdef inline int make_arg(object arg,             # <<<<<<<<<<<<<<
 *                          DGLValue* value,
 *                          int* tcode,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.make_arg", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tstr);
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":157
 *     return 0
 * 
 * cdef inline bytearray make_ret_bytes(void* chandle):             # <<<<<<<<<<<<<<
 *     handle = ctypes_handle(chandle)
 *     arr = ctypes.cast(handle, ctypes.POINTER(DGLByteArray))[0]
 */

static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_make_ret_bytes(void *__pyx_v_chandle) {
  PyObject *__pyx_v_handle = NULL;
  PyObject *__pyx_v_arr = NULL;
  PyObject *__pyx_v_size = NULL;
  PyObject *__pyx_v_res = NULL;
  PyObject *__pyx_v_rptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_ret_bytes", 0);

  /* "dgl/_ffi/_cython/function.pxi":158
 * 
 * cdef inline bytearray make_ret_bytes(void* chandle):
 *     handle = ctypes_handle(chandle)             # <<<<<<<<<<<<<<
 *     arr = ctypes.cast(handle, ctypes.POINTER(DGLByteArray))[0]
 *     size = arr.size
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_ctypes_handle(__pyx_v_chandle); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_handle = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/function.pxi":159
 * cdef inline bytearray make_ret_bytes(void* chandle):
 *     handle = ctypes_handle(chandle)
 *     arr = ctypes.cast(handle, ctypes.POINTER(DGLByteArray))[0]             # <<<<<<<<<<<<<<
 *     size = arr.size
 *     res = bytearray(size)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_cast); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_POINTER); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_DGLByteArray); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_handle, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 159, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_handle, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 159, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_handle);
    __Pyx_GIVEREF(__pyx_v_handle);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, __pyx_v_handle);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_arr = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "dgl/_ffi/_cython/function.pxi":160
 *     handle = ctypes_handle(chandle)
 *     arr = ctypes.cast(handle, ctypes.POINTER(DGLByteArray))[0]
 *     size = arr.size             # <<<<<<<<<<<<<<
 *     res = bytearray(size)
 *     rptr = (ctypes.c_byte * size).from_buffer(res)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_size = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "dgl/_ffi/_cython/function.pxi":161
 *     arr = ctypes.cast(handle, ctypes.POINTER(DGLByteArray))[0]
 *     size = arr.size
 *     res = bytearray(size)             # <<<<<<<<<<<<<<
 *     rptr = (ctypes.c_byte * size).from_buffer(res)
 *     if not ctypes.memmove(rptr, arr.data, size):
 */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyByteArray_Type)), __pyx_v_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_res = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "dgl/_ffi/_cython/function.pxi":162
 *     size = arr.size
 *     res = bytearray(size)
 *     rptr = (ctypes.c_byte * size).from_buffer(res)             # <<<<<<<<<<<<<<
 *     if not ctypes.memmove(rptr, arr.data, size):
 *         raise RuntimeError('memmove failed')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_c_byte); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_v_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_from_buffer); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_v_res) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_res);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_rptr = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "dgl/_ffi/_cython/function.pxi":163
 *     res = bytearray(size)
 *     rptr = (ctypes.c_byte * size).from_buffer(res)
 *     if not ctypes.memmove(rptr, arr.data, size):             # <<<<<<<<<<<<<<
 *         raise RuntimeError('memmove failed')
 *     return res
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_memmove); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_rptr, __pyx_t_4, __pyx_v_size};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 163, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_rptr, __pyx_t_4, __pyx_v_size};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 163, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_rptr);
    __Pyx_GIVEREF(__pyx_v_rptr);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_rptr);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_size);
    __Pyx_GIVEREF(__pyx_v_size);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_7, __pyx_v_size);
    __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(2, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = ((!__pyx_t_8) != 0);
  if (unlikely(__pyx_t_9)) {

    /* "dgl/_ffi/_cython/function.pxi":164
 *     rptr = (ctypes.c_byte * size).from_buffer(res)
 *     if not ctypes.memmove(rptr, arr.data, size):
 *         raise RuntimeError('memmove failed')             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 164, __pyx_L1_error)

    /* "dgl/_ffi/_cython/function.pxi":163
 *     res = bytearray(size)
 *     rptr = (ctypes.c_byte * size).from_buffer(res)
 *     if not ctypes.memmove(rptr, arr.data, size):             # <<<<<<<<<<<<<<
 *         raise RuntimeError('memmove failed')
 *     return res
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":165
 *     if not ctypes.memmove(rptr, arr.data, size):
 *         raise RuntimeError('memmove failed')
 *     return res             # <<<<<<<<<<<<<<
 * 
 * cdef inline object make_ret(DGLValue value, int tcode):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_res);
  __pyx_r = __pyx_v_res;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/function.pxi":157
 *     return 0
 * 
 * cdef inline bytearray make_ret_bytes(void* chandle):             # <<<<<<<<<<<<<<
 *     handle = ctypes_handle(chandle)
 *     arr = ctypes.cast(handle, ctypes.POINTER(DGLByteArray))[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.make_ret_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_handle);
  __Pyx_XDECREF(__pyx_v_arr);
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XDECREF(__pyx_v_res);
  __Pyx_XDECREF(__pyx_v_rptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":167
 *     return res
 * 
 * cdef inline object make_ret(DGLValue value, int tcode):             # <<<<<<<<<<<<<<
 *     """convert result to return value."""
 *     if tcode == kObjectHandle:
 */

static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_make_ret(DGLValue __pyx_v_value, int __pyx_v_tcode) {
  PyObject *__pyx_v_fobj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  void *__pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_ret", 0);

  /* "dgl/_ffi/_cython/function.pxi":169
 * cdef inline object make_ret(DGLValue value, int tcode):
 *     """convert result to return value."""
 *     if tcode == kObjectHandle:             # <<<<<<<<<<<<<<
 *         return make_ret_object(value.v_handle)
 *     elif tcode == kNull:
 */
  __pyx_t_1 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kObjectHandle) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":170
 *     """convert result to return value."""
 *     if tcode == kObjectHandle:
 *         return make_ret_object(value.v_handle)             # <<<<<<<<<<<<<<
 *     elif tcode == kNull:
 *         return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_make_ret_object(__pyx_v_value.v_handle); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":169
 * cdef inline object make_ret(DGLValue value, int tcode):
 *     """convert result to return value."""
 *     if tcode == kObjectHandle:             # <<<<<<<<<<<<<<
 *         return make_ret_object(value.v_handle)
 *     elif tcode == kNull:
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":171
 *     if tcode == kObjectHandle:
 *         return make_ret_object(value.v_handle)
 *     elif tcode == kNull:             # <<<<<<<<<<<<<<
 *         return None
 *     elif tcode == kInt:
 */
  __pyx_t_1 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kNull) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":172
 *         return make_ret_object(value.v_handle)
 *     elif tcode == kNull:
 *         return None             # <<<<<<<<<<<<<<
 *     elif tcode == kInt:
 *         return value.v_int64
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":171
 *     if tcode == kObjectHandle:
 *         return make_ret_object(value.v_handle)
 *     elif tcode == kNull:             # <<<<<<<<<<<<<<
 *         return None
 *     elif tcode == kInt:
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":173
 *     elif tcode == kNull:
 *         return None
 *     elif tcode == kInt:             # <<<<<<<<<<<<<<
 *         return value.v_int64
 *     elif tcode == kFloat:
 */
  __pyx_t_1 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kInt) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":174
 *         return None
 *     elif tcode == kInt:
 *         return value.v_int64             # <<<<<<<<<<<<<<
 *     elif tcode == kFloat:
 *         return value.v_float64
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_value.v_int64); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":173
 *     elif tcode == kNull:
 *         return None
 *     elif tcode == kInt:             # <<<<<<<<<<<<<<
 *         return value.v_int64
 *     elif tcode == kFloat:
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":175
 *     elif tcode == kInt:
 *         return value.v_int64
 *     elif tcode == kFloat:             # <<<<<<<<<<<<<<
 *         return value.v_float64
 *     elif tcode == kNDArrayContainer:
 */
  __pyx_t_1 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kFloat) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":176
 *         return value.v_int64
 *     elif tcode == kFloat:
 *         return value.v_float64             # <<<<<<<<<<<<<<
 *     elif tcode == kNDArrayContainer:
 *         return c_make_array(value.v_handle, False)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_value.v_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":175
 *     elif tcode == kInt:
 *         return value.v_int64
 *     elif tcode == kFloat:             # <<<<<<<<<<<<<<
 *         return value.v_float64
 *     elif tcode == kNDArrayContainer:
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":177
 *     elif tcode == kFloat:
 *         return value.v_float64
 *     elif tcode == kNDArrayContainer:             # <<<<<<<<<<<<<<
 *         return c_make_array(value.v_handle, False)
 *     elif tcode == kStr:
 */
  __pyx_t_1 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kNDArrayContainer) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":178
 *         return value.v_float64
 *     elif tcode == kNDArrayContainer:
 *         return c_make_array(value.v_handle, False)             # <<<<<<<<<<<<<<
 *     elif tcode == kStr:
 *         return py_str(value.v_str)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_c_make_array(__pyx_v_value.v_handle, Py_False); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":177
 *     elif tcode == kFloat:
 *         return value.v_float64
 *     elif tcode == kNDArrayContainer:             # <<<<<<<<<<<<<<
 *         return c_make_array(value.v_handle, False)
 *     elif tcode == kStr:
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":179
 *     elif tcode == kNDArrayContainer:
 *         return c_make_array(value.v_handle, False)
 *     elif tcode == kStr:             # <<<<<<<<<<<<<<
 *         return py_str(value.v_str)
 *     elif tcode == kBytes:
 */
  __pyx_t_1 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kStr) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":180
 *         return c_make_array(value.v_handle, False)
 *     elif tcode == kStr:
 *         return py_str(value.v_str)             # <<<<<<<<<<<<<<
 *     elif tcode == kBytes:
 *         return make_ret_bytes(value.v_handle)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_py_str(__pyx_v_value.v_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":179
 *     elif tcode == kNDArrayContainer:
 *         return c_make_array(value.v_handle, False)
 *     elif tcode == kStr:             # <<<<<<<<<<<<<<
 *         return py_str(value.v_str)
 *     elif tcode == kBytes:
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":181
 *     elif tcode == kStr:
 *         return py_str(value.v_str)
 *     elif tcode == kBytes:             # <<<<<<<<<<<<<<
 *         return make_ret_bytes(value.v_handle)
 *     elif tcode == kHandle:
 */
  __pyx_t_1 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kBytes) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":182
 *         return py_str(value.v_str)
 *     elif tcode == kBytes:
 *         return make_ret_bytes(value.v_handle)             # <<<<<<<<<<<<<<
 *     elif tcode == kHandle:
 *         return ctypes_handle(value.v_handle)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_make_ret_bytes(__pyx_v_value.v_handle); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":181
 *     elif tcode == kStr:
 *         return py_str(value.v_str)
 *     elif tcode == kBytes:             # <<<<<<<<<<<<<<
 *         return make_ret_bytes(value.v_handle)
 *     elif tcode == kHandle:
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":183
 *     elif tcode == kBytes:
 *         return make_ret_bytes(value.v_handle)
 *     elif tcode == kHandle:             # <<<<<<<<<<<<<<
 *         return ctypes_handle(value.v_handle)
 *     elif tcode == kDGLContext:
 */
  __pyx_t_1 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kHandle) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":184
 *         return make_ret_bytes(value.v_handle)
 *     elif tcode == kHandle:
 *         return ctypes_handle(value.v_handle)             # <<<<<<<<<<<<<<
 *     elif tcode == kDGLContext:
 *         return DGLContext(value.v_ctx.device_type, value.v_ctx.device_id)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_ctypes_handle(__pyx_v_value.v_handle); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":183
 *     elif tcode == kBytes:
 *         return make_ret_bytes(value.v_handle)
 *     elif tcode == kHandle:             # <<<<<<<<<<<<<<
 *         return ctypes_handle(value.v_handle)
 *     elif tcode == kDGLContext:
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":185
 *     elif tcode == kHandle:
 *         return ctypes_handle(value.v_handle)
 *     elif tcode == kDGLContext:             # <<<<<<<<<<<<<<
 *         return DGLContext(value.v_ctx.device_type, value.v_ctx.device_id)
 *     # (minjie): class module are not used in DGL.
 */
  __pyx_t_1 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kDGLContext) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":186
 *         return ctypes_handle(value.v_handle)
 *     elif tcode == kDGLContext:
 *         return DGLContext(value.v_ctx.device_type, value.v_ctx.device_id)             # <<<<<<<<<<<<<<
 *     # (minjie): class module are not used in DGL.
 *     #elif tcode == kModuleHandle:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_DGLContext); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_value.v_ctx.device_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_value.v_ctx.device_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 186, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 186, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":185
 *     elif tcode == kHandle:
 *         return ctypes_handle(value.v_handle)
 *     elif tcode == kDGLContext:             # <<<<<<<<<<<<<<
 *         return DGLContext(value.v_ctx.device_type, value.v_ctx.device_id)
 *     # (minjie): class module are not used in DGL.
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":190
 *     #elif tcode == kModuleHandle:
 *     #    return _CLASS_MODULE(ctypes_handle(value.v_handle))
 *     elif tcode == kFuncHandle:             # <<<<<<<<<<<<<<
 *         fobj = _CLASS_FUNCTION(None, False)
 *         (<FunctionBase>fobj).chandle = value.v_handle
 */
  __pyx_t_1 = ((__pyx_v_tcode == __pyx_e_3dgl_4_ffi_4_cy3_4core_kFuncHandle) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":191
 *     #    return _CLASS_MODULE(ctypes_handle(value.v_handle))
 *     elif tcode == kFuncHandle:
 *         fobj = _CLASS_FUNCTION(None, False)             # <<<<<<<<<<<<<<
 *         (<FunctionBase>fobj).chandle = value.v_handle
 *         return fobj
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_CLASS_FUNCTION); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_fobj = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "dgl/_ffi/_cython/function.pxi":192
 *     elif tcode == kFuncHandle:
 *         fobj = _CLASS_FUNCTION(None, False)
 *         (<FunctionBase>fobj).chandle = value.v_handle             # <<<<<<<<<<<<<<
 *         return fobj
 *     elif tcode in _DGL_EXT_RET:
 */
    __pyx_t_9 = __pyx_v_value.v_handle;
    ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_fobj)->chandle = __pyx_t_9;

    /* "dgl/_ffi/_cython/function.pxi":193
 *         fobj = _CLASS_FUNCTION(None, False)
 *         (<FunctionBase>fobj).chandle = value.v_handle
 *         return fobj             # <<<<<<<<<<<<<<
 *     elif tcode in _DGL_EXT_RET:
 *         return _DGL_EXT_RET[tcode](ctypes_handle(value.v_handle))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_fobj);
    __pyx_r = __pyx_v_fobj;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":190
 *     #elif tcode == kModuleHandle:
 *     #    return _CLASS_MODULE(ctypes_handle(value.v_handle))
 *     elif tcode == kFuncHandle:             # <<<<<<<<<<<<<<
 *         fobj = _CLASS_FUNCTION(None, False)
 *         (<FunctionBase>fobj).chandle = value.v_handle
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":194
 *         (<FunctionBase>fobj).chandle = value.v_handle
 *         return fobj
 *     elif tcode in _DGL_EXT_RET:             # <<<<<<<<<<<<<<
 *         return _DGL_EXT_RET[tcode](ctypes_handle(value.v_handle))
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tcode); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_3, __pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_EXT_RET, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = (__pyx_t_1 != 0);
  if (__pyx_t_10) {

    /* "dgl/_ffi/_cython/function.pxi":195
 *         return fobj
 *     elif tcode in _DGL_EXT_RET:
 *         return _DGL_EXT_RET[tcode](ctypes_handle(value.v_handle))             # <<<<<<<<<<<<<<
 * 
 *     raise ValueError("Unhandled type code %d" % tcode)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_EXT_RET, __pyx_v_tcode, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __pyx_f_3dgl_4_ffi_4_cy3_4core_ctypes_handle(__pyx_v_value.v_handle); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":194
 *         (<FunctionBase>fobj).chandle = value.v_handle
 *         return fobj
 *     elif tcode in _DGL_EXT_RET:             # <<<<<<<<<<<<<<
 *         return _DGL_EXT_RET[tcode](ctypes_handle(value.v_handle))
 * 
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":197
 *         return _DGL_EXT_RET[tcode](ctypes_handle(value.v_handle))
 * 
 *     raise ValueError("Unhandled type code %d" % tcode)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_tcode); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Unhandled_type_code_d, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(2, 197, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":167
 *     return res
 * 
 * cdef inline object make_ret(DGLValue value, int tcode):             # <<<<<<<<<<<<<<
 *     """convert result to return value."""
 *     if tcode == kObjectHandle:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.make_ret", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fobj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":200
 * 
 * 
 * cdef inline int FuncCall3(void* chandle,             # <<<<<<<<<<<<<<
 *                           tuple args,
 *                           int nargs,
 */

static CYTHON_INLINE int __pyx_f_3dgl_4_ffi_4_cy3_4core_FuncCall3(void *__pyx_v_chandle, PyObject *__pyx_v_args, int __pyx_v_nargs, DGLValue *__pyx_v_ret_val, int *__pyx_v_ret_tcode) {
  DGLValue __pyx_v_values[3];
  int __pyx_v_tcodes[3];
  PyObject *__pyx_v_temp_args = NULL;
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FuncCall3", 0);

  /* "dgl/_ffi/_cython/function.pxi":207
 *     cdef DGLValue[3] values
 *     cdef int[3] tcodes
 *     nargs = len(args)             # <<<<<<<<<<<<<<
 *     temp_args = []
 *     for i in range(nargs):
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 207, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(2, 207, __pyx_L1_error)
  __pyx_v_nargs = __pyx_t_1;

  /* "dgl/_ffi/_cython/function.pxi":208
 *     cdef int[3] tcodes
 *     nargs = len(args)
 *     temp_args = []             # <<<<<<<<<<<<<<
 *     for i in range(nargs):
 *         make_arg(args[i], &values[i], &tcodes[i], temp_args)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_temp_args = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/function.pxi":209
 *     nargs = len(args)
 *     temp_args = []
 *     for i in range(nargs):             # <<<<<<<<<<<<<<
 *         make_arg(args[i], &values[i], &tcodes[i], temp_args)
 *     CALL(DGLFuncCall(chandle, &values[0], &tcodes[0],
 */
  __pyx_t_3 = __pyx_v_nargs;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "dgl/_ffi/_cython/function.pxi":210
 *     temp_args = []
 *     for i in range(nargs):
 *         make_arg(args[i], &values[i], &tcodes[i], temp_args)             # <<<<<<<<<<<<<<
 *     CALL(DGLFuncCall(chandle, &values[0], &tcodes[0],
 *                      nargs, ret_val, ret_tcode))
 */
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 210, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_v_args, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __pyx_f_3dgl_4_ffi_4_cy3_4core_make_arg(__pyx_t_2, (&(__pyx_v_values[__pyx_v_i])), (&(__pyx_v_tcodes[__pyx_v_i])), __pyx_v_temp_args); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 210, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "dgl/_ffi/_cython/function.pxi":211
 *     for i in range(nargs):
 *         make_arg(args[i], &values[i], &tcodes[i], temp_args)
 *     CALL(DGLFuncCall(chandle, &values[0], &tcodes[0],             # <<<<<<<<<<<<<<
 *                      nargs, ret_val, ret_tcode))
 *     return 0
 */
  __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLFuncCall(__pyx_v_chandle, (&(__pyx_v_values[0])), (&(__pyx_v_tcodes[0])), __pyx_v_nargs, __pyx_v_ret_val, __pyx_v_ret_tcode)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/function.pxi":213
 *     CALL(DGLFuncCall(chandle, &values[0], &tcodes[0],
 *                      nargs, ret_val, ret_tcode))
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int FuncCall(void* chandle,
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/function.pxi":200
 * 
 * 
 * cdef inline int FuncCall3(void* chandle,             # <<<<<<<<<<<<<<
 *                           tuple args,
 *                           int nargs,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.FuncCall3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_temp_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":215
 *     return 0
 * 
 * cdef inline int FuncCall(void* chandle,             # <<<<<<<<<<<<<<
 *                          tuple args,
 *                          DGLValue* ret_val,
 */

static CYTHON_INLINE int __pyx_f_3dgl_4_ffi_4_cy3_4core_FuncCall(void *__pyx_v_chandle, PyObject *__pyx_v_args, DGLValue *__pyx_v_ret_val, int *__pyx_v_ret_tcode) {
  int __pyx_v_nargs;
  std::vector<DGLValue>  __pyx_v_values;
  std::vector<int>  __pyx_v_tcodes;
  PyObject *__pyx_v_temp_args = NULL;
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FuncCall", 0);

  /* "dgl/_ffi/_cython/function.pxi":220
 *                          int* ret_tcode) except -1:
 *     cdef int nargs
 *     nargs = len(args)             # <<<<<<<<<<<<<<
 *     if nargs <= 3:
 *         FuncCall3(chandle, args, nargs, ret_val, ret_tcode)
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 220, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(2, 220, __pyx_L1_error)
  __pyx_v_nargs = __pyx_t_1;

  /* "dgl/_ffi/_cython/function.pxi":221
 *     cdef int nargs
 *     nargs = len(args)
 *     if nargs <= 3:             # <<<<<<<<<<<<<<
 *         FuncCall3(chandle, args, nargs, ret_val, ret_tcode)
 *         return 0
 */
  __pyx_t_2 = ((__pyx_v_nargs <= 3) != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/function.pxi":222
 *     nargs = len(args)
 *     if nargs <= 3:
 *         FuncCall3(chandle, args, nargs, ret_val, ret_tcode)             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __pyx_t_3 = __pyx_f_3dgl_4_ffi_4_cy3_4core_FuncCall3(__pyx_v_chandle, __pyx_v_args, __pyx_v_nargs, __pyx_v_ret_val, __pyx_v_ret_tcode); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 222, __pyx_L1_error)

    /* "dgl/_ffi/_cython/function.pxi":223
 *     if nargs <= 3:
 *         FuncCall3(chandle, args, nargs, ret_val, ret_tcode)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[DGLValue] values
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":221
 *     cdef int nargs
 *     nargs = len(args)
 *     if nargs <= 3:             # <<<<<<<<<<<<<<
 *         FuncCall3(chandle, args, nargs, ret_val, ret_tcode)
 *         return 0
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":227
 *     cdef vector[DGLValue] values
 *     cdef vector[int] tcodes
 *     values.resize(max(nargs, 1))             # <<<<<<<<<<<<<<
 *     tcodes.resize(max(nargs, 1))
 *     temp_args = []
 */
  __pyx_t_4 = 1;
  __pyx_t_3 = __pyx_v_nargs;
  if (((__pyx_t_4 > __pyx_t_3) != 0)) {
    __pyx_t_5 = __pyx_t_4;
  } else {
    __pyx_t_5 = __pyx_t_3;
  }
  try {
    __pyx_v_values.resize(__pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 227, __pyx_L1_error)
  }

  /* "dgl/_ffi/_cython/function.pxi":228
 *     cdef vector[int] tcodes
 *     values.resize(max(nargs, 1))
 *     tcodes.resize(max(nargs, 1))             # <<<<<<<<<<<<<<
 *     temp_args = []
 *     for i in range(nargs):
 */
  __pyx_t_5 = 1;
  __pyx_t_3 = __pyx_v_nargs;
  if (((__pyx_t_5 > __pyx_t_3) != 0)) {
    __pyx_t_4 = __pyx_t_5;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  try {
    __pyx_v_tcodes.resize(__pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(2, 228, __pyx_L1_error)
  }

  /* "dgl/_ffi/_cython/function.pxi":229
 *     values.resize(max(nargs, 1))
 *     tcodes.resize(max(nargs, 1))
 *     temp_args = []             # <<<<<<<<<<<<<<
 *     for i in range(nargs):
 *         make_arg(args[i], &values[i], &tcodes[i], temp_args)
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_temp_args = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "dgl/_ffi/_cython/function.pxi":230
 *     tcodes.resize(max(nargs, 1))
 *     temp_args = []
 *     for i in range(nargs):             # <<<<<<<<<<<<<<
 *         make_arg(args[i], &values[i], &tcodes[i], temp_args)
 *     CALL(DGLFuncCall(chandle, &values[0], &tcodes[0],
 */
  __pyx_t_3 = __pyx_v_nargs;
  __pyx_t_7 = __pyx_t_3;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "dgl/_ffi/_cython/function.pxi":231
 *     temp_args = []
 *     for i in range(nargs):
 *         make_arg(args[i], &values[i], &tcodes[i], temp_args)             # <<<<<<<<<<<<<<
 *     CALL(DGLFuncCall(chandle, &values[0], &tcodes[0],
 *                      nargs, ret_val, ret_tcode))
 */
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 231, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_args, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __pyx_f_3dgl_4_ffi_4_cy3_4core_make_arg(__pyx_t_6, (&(__pyx_v_values[__pyx_v_i])), (&(__pyx_v_tcodes[__pyx_v_i])), __pyx_v_temp_args); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 231, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "dgl/_ffi/_cython/function.pxi":232
 *     for i in range(nargs):
 *         make_arg(args[i], &values[i], &tcodes[i], temp_args)
 *     CALL(DGLFuncCall(chandle, &values[0], &tcodes[0],             # <<<<<<<<<<<<<<
 *                      nargs, ret_val, ret_tcode))
 *     return 0
 */
  __pyx_t_6 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLFuncCall(__pyx_v_chandle, (&(__pyx_v_values[0])), (&(__pyx_v_tcodes[0])), __pyx_v_nargs, __pyx_v_ret_val, __pyx_v_ret_tcode)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "dgl/_ffi/_cython/function.pxi":234
 *     CALL(DGLFuncCall(chandle, &values[0], &tcodes[0],
 *                      nargs, ret_val, ret_tcode))
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/function.pxi":215
 *     return 0
 * 
 * cdef inline int FuncCall(void* chandle,             # <<<<<<<<<<<<<<
 *                          tuple args,
 *                          DGLValue* ret_val,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.FuncCall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_temp_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":237
 * 
 * 
 * cdef inline int ConstructorCall(void* constructor_handle,             # <<<<<<<<<<<<<<
 *                                 int type_code,
 *                                 tuple args,
 */

static CYTHON_INLINE int __pyx_f_3dgl_4_ffi_4_cy3_4core_ConstructorCall(void *__pyx_v_constructor_handle, int __pyx_v_type_code, PyObject *__pyx_v_args, void **__pyx_v_handle) {
  DGLValue __pyx_v_ret_val;
  int __pyx_v_ret_tcode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  void *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ConstructorCall", 0);

  /* "dgl/_ffi/_cython/function.pxi":244
 *     cdef DGLValue ret_val
 *     cdef int ret_tcode
 *     FuncCall(constructor_handle, args, &ret_val, &ret_tcode)             # <<<<<<<<<<<<<<
 *     assert ret_tcode == type_code
 *     handle[0] = ret_val.v_handle
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_FuncCall(__pyx_v_constructor_handle, __pyx_v_args, (&__pyx_v_ret_val), (&__pyx_v_ret_tcode)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 244, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":245
 *     cdef int ret_tcode
 *     FuncCall(constructor_handle, args, &ret_val, &ret_tcode)
 *     assert ret_tcode == type_code             # <<<<<<<<<<<<<<
 *     handle[0] = ret_val.v_handle
 *     return 0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_ret_tcode == __pyx_v_type_code) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(2, 245, __pyx_L1_error)
    }
  }
  #endif

  /* "dgl/_ffi/_cython/function.pxi":246
 *     FuncCall(constructor_handle, args, &ret_val, &ret_tcode)
 *     assert ret_tcode == type_code
 *     handle[0] = ret_val.v_handle             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __pyx_t_2 = __pyx_v_ret_val.v_handle;
  (__pyx_v_handle[0]) = __pyx_t_2;

  /* "dgl/_ffi/_cython/function.pxi":247
 *     assert ret_tcode == type_code
 *     handle[0] = ret_val.v_handle
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/function.pxi":237
 * 
 * 
 * cdef inline int ConstructorCall(void* constructor_handle,             # <<<<<<<<<<<<<<
 *                                 int type_code,
 *                                 tuple args,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("dgl._ffi._cy3.core.ConstructorCall", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":254
 *     cdef int is_global
 * 
 *     cdef inline _set_handle(self, handle):             # <<<<<<<<<<<<<<
 *         if handle is None:
 *             self.chandle = NULL
 */

static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_12FunctionBase__set_handle(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, PyObject *__pyx_v_handle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("_set_handle", 0);

  /* "dgl/_ffi/_cython/function.pxi":255
 * 
 *     cdef inline _set_handle(self, handle):
 *         if handle is None:             # <<<<<<<<<<<<<<
 *             self.chandle = NULL
 *         else:
 */
  __pyx_t_1 = (__pyx_v_handle == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/function.pxi":256
 *     cdef inline _set_handle(self, handle):
 *         if handle is None:
 *             self.chandle = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             self.chandle = c_handle(handle)
 */
    __pyx_v_self->chandle = NULL;

    /* "dgl/_ffi/_cython/function.pxi":255
 * 
 *     cdef inline _set_handle(self, handle):
 *         if handle is None:             # <<<<<<<<<<<<<<
 *             self.chandle = NULL
 *         else:
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/function.pxi":258
 *             self.chandle = NULL
 *         else:
 *             self.chandle = c_handle(handle)             # <<<<<<<<<<<<<<
 * 
 *     property is_global:
 */
  /*else*/ {
    __pyx_v_self->chandle = __pyx_f_3dgl_4_ffi_4_cy3_4core_c_handle(__pyx_v_handle);
  }
  __pyx_L3:;

  /* "dgl/_ffi/_cython/function.pxi":254
 *     cdef int is_global
 * 
 *     cdef inline _set_handle(self, handle):             # <<<<<<<<<<<<<<
 *         if handle is None:
 *             self.chandle = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":261
 * 
 *     property is_global:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c_is_global != 0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global___get__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global___get__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dgl/_ffi/_cython/function.pxi":262
 *     property is_global:
 *         def __get__(self):
 *             return self.c_is_global != 0             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_c_is_global); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_t_1, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/function.pxi":261
 * 
 *     property is_global:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c_is_global != 0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.FunctionBase.is_global.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":264
 *             return self.c_is_global != 0
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.c_is_global = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global_2__set__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global_2__set__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dgl/_ffi/_cython/function.pxi":265
 * 
 *         def __set__(self, value):
 *             self.c_is_global = value             # <<<<<<<<<<<<<<
 * 
 *     property handle:
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_c_is_global, __pyx_v_value) < 0) __PYX_ERR(2, 265, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":264
 *             return self.c_is_global != 0
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self.c_is_global = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dgl._ffi._cy3.core.FunctionBase.is_global.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":268
 * 
 *     property handle:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.chandle == NULL:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle___get__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle___get__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dgl/_ffi/_cython/function.pxi":269
 *     property handle:
 *         def __get__(self):
 *             if self.chandle == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_self->chandle == NULL) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":270
 *         def __get__(self):
 *             if self.chandle == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return ctypes.cast(<unsigned long long>self.chandle, ctypes.c_void_p)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/function.pxi":269
 *     property handle:
 *         def __get__(self):
 *             if self.chandle == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":272
 *                 return None
 *             else:
 *                 return ctypes.cast(<unsigned long long>self.chandle, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         def __set__(self, value):
 *             self._set_handle(value)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_self->chandle)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 272, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_3, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 272, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_6);
      __pyx_t_3 = 0;
      __pyx_t_6 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "dgl/_ffi/_cython/function.pxi":268
 * 
 *     property handle:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.chandle == NULL:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.FunctionBase.handle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":273
 *             else:
 *                 return ctypes.cast(<unsigned long long>self.chandle, ctypes.c_void_p)
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_handle(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle_2__set__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle_2__set__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dgl/_ffi/_cython/function.pxi":274
 *                 return ctypes.cast(<unsigned long long>self.chandle, ctypes.c_void_p)
 *         def __set__(self, value):
 *             self._set_handle(value)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, handle, is_global):
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_12FunctionBase__set_handle(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/function.pxi":273
 *             else:
 *                 return ctypes.cast(<unsigned long long>self.chandle, ctypes.c_void_p)
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_handle(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.FunctionBase.handle.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":276
 *             self._set_handle(value)
 * 
 *     def __init__(self, handle, is_global):             # <<<<<<<<<<<<<<
 *         self._set_handle(handle)
 *         self.c_is_global = is_global
 */

/* Python wrapper */
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handle = 0;
  PyObject *__pyx_v_is_global = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_is_global,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_global)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(2, 276, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 276, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handle = values[0];
    __pyx_v_is_global = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 276, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("dgl._ffi._cy3.core.FunctionBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase___init__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_self), __pyx_v_handle, __pyx_v_is_global);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase___init__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, PyObject *__pyx_v_handle, PyObject *__pyx_v_is_global) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "dgl/_ffi/_cython/function.pxi":277
 * 
 *     def __init__(self, handle, is_global):
 *         self._set_handle(handle)             # <<<<<<<<<<<<<<
 *         self.c_is_global = is_global
 * 
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_12FunctionBase__set_handle(__pyx_v_self, __pyx_v_handle); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/function.pxi":278
 *     def __init__(self, handle, is_global):
 *         self._set_handle(handle)
 *         self.c_is_global = is_global             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_c_is_global, __pyx_v_is_global) < 0) __PYX_ERR(2, 278, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":276
 *             self._set_handle(value)
 * 
 *     def __init__(self, handle, is_global):             # <<<<<<<<<<<<<<
 *         self._set_handle(handle)
 *         self.c_is_global = is_global
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.FunctionBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":280
 *         self.c_is_global = is_global
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.is_global == 0:
 *             CALL(DGLFuncFree(self.chandle))
 */

/* Python wrapper */
static void __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_2__dealloc__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_2__dealloc__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "dgl/_ffi/_cython/function.pxi":281
 * 
 *     def __dealloc__(self):
 *         if self.is_global == 0:             # <<<<<<<<<<<<<<
 *             CALL(DGLFuncFree(self.chandle))
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->is_global == 0) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/function.pxi":282
 *     def __dealloc__(self):
 *         if self.is_global == 0:
 *             CALL(DGLFuncFree(self.chandle))             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, *args):
 */
    __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLFuncFree(__pyx_v_self->chandle)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "dgl/_ffi/_cython/function.pxi":281
 * 
 *     def __dealloc__(self):
 *         if self.is_global == 0:             # <<<<<<<<<<<<<<
 *             CALL(DGLFuncFree(self.chandle))
 * 
 */
  }

  /* "dgl/_ffi/_cython/function.pxi":280
 *         self.c_is_global = is_global
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.is_global == 0:
 *             CALL(DGLFuncFree(self.chandle))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("dgl._ffi._cy3.core.FunctionBase.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "dgl/_ffi/_cython/function.pxi":284
 *             CALL(DGLFuncFree(self.chandle))
 * 
 *     def __call__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef DGLValue ret_val
 *         cdef int ret_tcode
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_5__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_4__call__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_4__call__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, PyObject *__pyx_v_args) {
  DGLValue __pyx_v_ret_val;
  int __pyx_v_ret_tcode;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "dgl/_ffi/_cython/function.pxi":287
 *         cdef DGLValue ret_val
 *         cdef int ret_tcode
 *         FuncCall(self.chandle, args, &ret_val, &ret_tcode)             # <<<<<<<<<<<<<<
 *         return make_ret(ret_val, ret_tcode)
 * 
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_FuncCall(__pyx_v_self->chandle, __pyx_v_args, (&__pyx_v_ret_val), (&__pyx_v_ret_tcode)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 287, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":288
 *         cdef int ret_tcode
 *         FuncCall(self.chandle, args, &ret_val, &ret_tcode)
 *         return make_ret(ret_val, ret_tcode)             # <<<<<<<<<<<<<<
 * 
 * _CLASS_FUNCTION = None
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_make_ret(__pyx_v_ret_val, __pyx_v_ret_tcode); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/function.pxi":284
 *             CALL(DGLFuncFree(self.chandle))
 * 
 *     def __call__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef DGLValue ret_val
 *         cdef int ret_tcode
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.FunctionBase.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6__reduce_cython__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.FunctionBase.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_8__setstate_cython__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12FunctionBase_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.FunctionBase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":293
 * _CLASS_MODULE = None
 * 
 * def _set_class_module(module_class):             # <<<<<<<<<<<<<<
 *     """Initialize the module."""
 *     global _CLASS_MODULE
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_5_set_class_module(PyObject *__pyx_self, PyObject *__pyx_v_module_class); /*proto*/
static char __pyx_doc_3dgl_4_ffi_4_cy3_4core_4_set_class_module[] = "Initialize the module.";
static PyMethodDef __pyx_mdef_3dgl_4_ffi_4_cy3_4core_5_set_class_module = {"_set_class_module", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_5_set_class_module, METH_O, __pyx_doc_3dgl_4_ffi_4_cy3_4core_4_set_class_module};
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_5_set_class_module(PyObject *__pyx_self, PyObject *__pyx_v_module_class) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_class_module (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_4_set_class_module(__pyx_self, ((PyObject *)__pyx_v_module_class));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_4_set_class_module(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_module_class) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_class_module", 0);

  /* "dgl/_ffi/_cython/function.pxi":296
 *     """Initialize the module."""
 *     global _CLASS_MODULE
 *     _CLASS_MODULE = module_class             # <<<<<<<<<<<<<<
 * 
 * def _set_class_function(func_class):
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CLASS_MODULE, __pyx_v_module_class) < 0) __PYX_ERR(2, 296, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":293
 * _CLASS_MODULE = None
 * 
 * def _set_class_module(module_class):             # <<<<<<<<<<<<<<
 *     """Initialize the module."""
 *     global _CLASS_MODULE
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dgl._ffi._cy3.core._set_class_module", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/function.pxi":298
 *     _CLASS_MODULE = module_class
 * 
 * def _set_class_function(func_class):             # <<<<<<<<<<<<<<
 *     global _CLASS_FUNCTION
 *     _CLASS_FUNCTION = func_class
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_7_set_class_function(PyObject *__pyx_self, PyObject *__pyx_v_func_class); /*proto*/
static PyMethodDef __pyx_mdef_3dgl_4_ffi_4_cy3_4core_7_set_class_function = {"_set_class_function", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_7_set_class_function, METH_O, 0};
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_7_set_class_function(PyObject *__pyx_self, PyObject *__pyx_v_func_class) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_class_function (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_6_set_class_function(__pyx_self, ((PyObject *)__pyx_v_func_class));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_6_set_class_function(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func_class) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_class_function", 0);

  /* "dgl/_ffi/_cython/function.pxi":300
 * def _set_class_function(func_class):
 *     global _CLASS_FUNCTION
 *     _CLASS_FUNCTION = func_class             # <<<<<<<<<<<<<<
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CLASS_FUNCTION, __pyx_v_func_class) < 0) __PYX_ERR(2, 300, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":298
 *     _CLASS_MODULE = module_class
 * 
 * def _set_class_function(func_class):             # <<<<<<<<<<<<<<
 *     global _CLASS_FUNCTION
 *     _CLASS_FUNCTION = func_class
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("dgl._ffi._cy3.core._set_class_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/ndarray.pxi":7
 * 
 * 
 * cdef void _c_dlpack_deleter(object pycaps):             # <<<<<<<<<<<<<<
 *     cdef DLManagedTensor* dltensor
 *     if pycapsule.PyCapsule_IsValid(pycaps, _c_str_dltensor):
 */

static void __pyx_f_3dgl_4_ffi_4_cy3_4core__c_dlpack_deleter(PyObject *__pyx_v_pycaps) {
  DLManagedTensor *__pyx_v_dltensor;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  void *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_c_dlpack_deleter", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":9
 * cdef void _c_dlpack_deleter(object pycaps):
 *     cdef DLManagedTensor* dltensor
 *     if pycapsule.PyCapsule_IsValid(pycaps, _c_str_dltensor):             # <<<<<<<<<<<<<<
 *         dltensor = <DLManagedTensor*>pycapsule.PyCapsule_GetPointer(pycaps, _c_str_dltensor)
 *         DGLDLManagedTensorCallDeleter(dltensor)
 */
  __pyx_t_1 = (PyCapsule_IsValid(__pyx_v_pycaps, __pyx_v_3dgl_4_ffi_4_cy3_4core__c_str_dltensor) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/ndarray.pxi":10
 *     cdef DLManagedTensor* dltensor
 *     if pycapsule.PyCapsule_IsValid(pycaps, _c_str_dltensor):
 *         dltensor = <DLManagedTensor*>pycapsule.PyCapsule_GetPointer(pycaps, _c_str_dltensor)             # <<<<<<<<<<<<<<
 *         DGLDLManagedTensorCallDeleter(dltensor)
 * 
 */
    __pyx_t_2 = PyCapsule_GetPointer(__pyx_v_pycaps, __pyx_v_3dgl_4_ffi_4_cy3_4core__c_str_dltensor); if (unlikely(__pyx_t_2 == ((void *)NULL) && PyErr_Occurred())) __PYX_ERR(4, 10, __pyx_L1_error)
    __pyx_v_dltensor = ((DLManagedTensor *)__pyx_t_2);

    /* "dgl/_ffi/_cython/ndarray.pxi":11
 *     if pycapsule.PyCapsule_IsValid(pycaps, _c_str_dltensor):
 *         dltensor = <DLManagedTensor*>pycapsule.PyCapsule_GetPointer(pycaps, _c_str_dltensor)
 *         DGLDLManagedTensorCallDeleter(dltensor)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    DGLDLManagedTensorCallDeleter(__pyx_v_dltensor);

    /* "dgl/_ffi/_cython/ndarray.pxi":9
 * cdef void _c_dlpack_deleter(object pycaps):
 *     cdef DLManagedTensor* dltensor
 *     if pycapsule.PyCapsule_IsValid(pycaps, _c_str_dltensor):             # <<<<<<<<<<<<<<
 *         dltensor = <DLManagedTensor*>pycapsule.PyCapsule_GetPointer(pycaps, _c_str_dltensor)
 *         DGLDLManagedTensorCallDeleter(dltensor)
 */
  }

  /* "dgl/_ffi/_cython/ndarray.pxi":7
 * 
 * 
 * cdef void _c_dlpack_deleter(object pycaps):             # <<<<<<<<<<<<<<
 *     cdef DLManagedTensor* dltensor
 *     if pycapsule.PyCapsule_IsValid(pycaps, _c_str_dltensor):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("dgl._ffi._cy3.core._c_dlpack_deleter", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "dgl/_ffi/_cython/ndarray.pxi":14
 * 
 * 
 * def _from_dlpack(object dltensor):             # <<<<<<<<<<<<<<
 *     cdef DLManagedTensor* ptr
 *     cdef DLTensorHandle chandle
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_9_from_dlpack(PyObject *__pyx_self, PyObject *__pyx_v_dltensor); /*proto*/
static PyMethodDef __pyx_mdef_3dgl_4_ffi_4_cy3_4core_9_from_dlpack = {"_from_dlpack", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_9_from_dlpack, METH_O, 0};
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_9_from_dlpack(PyObject *__pyx_self, PyObject *__pyx_v_dltensor) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_from_dlpack (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_8_from_dlpack(__pyx_self, ((PyObject *)__pyx_v_dltensor));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_8_from_dlpack(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_dltensor) {
  DLManagedTensor *__pyx_v_ptr;
  __pyx_t_3dgl_4_ffi_4_cy3_4core_DLTensorHandle __pyx_v_chandle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  void *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_from_dlpack", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":17
 *     cdef DLManagedTensor* ptr
 *     cdef DLTensorHandle chandle
 *     if pycapsule.PyCapsule_IsValid(dltensor, _c_str_dltensor):             # <<<<<<<<<<<<<<
 *         ptr = <DLManagedTensor*>pycapsule.PyCapsule_GetPointer(dltensor, _c_str_dltensor)
 *         CALL(DGLArrayFromDLPack(ptr, &chandle))
 */
  __pyx_t_1 = (PyCapsule_IsValid(__pyx_v_dltensor, __pyx_v_3dgl_4_ffi_4_cy3_4core__c_str_dltensor) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/ndarray.pxi":18
 *     cdef DLTensorHandle chandle
 *     if pycapsule.PyCapsule_IsValid(dltensor, _c_str_dltensor):
 *         ptr = <DLManagedTensor*>pycapsule.PyCapsule_GetPointer(dltensor, _c_str_dltensor)             # <<<<<<<<<<<<<<
 *         CALL(DGLArrayFromDLPack(ptr, &chandle))
 *         # set name and destructor to be empty
 */
    __pyx_t_2 = PyCapsule_GetPointer(__pyx_v_dltensor, __pyx_v_3dgl_4_ffi_4_cy3_4core__c_str_dltensor); if (unlikely(__pyx_t_2 == ((void *)NULL) && PyErr_Occurred())) __PYX_ERR(4, 18, __pyx_L1_error)
    __pyx_v_ptr = ((DLManagedTensor *)__pyx_t_2);

    /* "dgl/_ffi/_cython/ndarray.pxi":19
 *     if pycapsule.PyCapsule_IsValid(dltensor, _c_str_dltensor):
 *         ptr = <DLManagedTensor*>pycapsule.PyCapsule_GetPointer(dltensor, _c_str_dltensor)
 *         CALL(DGLArrayFromDLPack(ptr, &chandle))             # <<<<<<<<<<<<<<
 *         # set name and destructor to be empty
 *         pycapsule.PyCapsule_SetDestructor(dltensor, NULL)
 */
    __pyx_t_3 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLArrayFromDLPack(__pyx_v_ptr, (&__pyx_v_chandle))); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 19, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dgl/_ffi/_cython/ndarray.pxi":21
 *         CALL(DGLArrayFromDLPack(ptr, &chandle))
 *         # set name and destructor to be empty
 *         pycapsule.PyCapsule_SetDestructor(dltensor, NULL)             # <<<<<<<<<<<<<<
 *         pycapsule.PyCapsule_SetName(dltensor, _c_str_used_dltensor)
 *         return c_make_array(chandle, 0)
 */
    __pyx_t_4 = PyCapsule_SetDestructor(__pyx_v_dltensor, NULL); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 21, __pyx_L1_error)

    /* "dgl/_ffi/_cython/ndarray.pxi":22
 *         # set name and destructor to be empty
 *         pycapsule.PyCapsule_SetDestructor(dltensor, NULL)
 *         pycapsule.PyCapsule_SetName(dltensor, _c_str_used_dltensor)             # <<<<<<<<<<<<<<
 *         return c_make_array(chandle, 0)
 *     raise ValueError("Expect a dltensor field, pycapsule.PyCapsule can only be consumed once")
 */
    __pyx_t_4 = PyCapsule_SetName(__pyx_v_dltensor, __pyx_v_3dgl_4_ffi_4_cy3_4core__c_str_used_dltensor); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(4, 22, __pyx_L1_error)

    /* "dgl/_ffi/_cython/ndarray.pxi":23
 *         pycapsule.PyCapsule_SetDestructor(dltensor, NULL)
 *         pycapsule.PyCapsule_SetName(dltensor, _c_str_used_dltensor)
 *         return c_make_array(chandle, 0)             # <<<<<<<<<<<<<<
 *     raise ValueError("Expect a dltensor field, pycapsule.PyCapsule can only be consumed once")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_f_3dgl_4_ffi_4_cy3_4core_c_make_array(__pyx_v_chandle, __pyx_int_0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/ndarray.pxi":17
 *     cdef DLManagedTensor* ptr
 *     cdef DLTensorHandle chandle
 *     if pycapsule.PyCapsule_IsValid(dltensor, _c_str_dltensor):             # <<<<<<<<<<<<<<
 *         ptr = <DLManagedTensor*>pycapsule.PyCapsule_GetPointer(dltensor, _c_str_dltensor)
 *         CALL(DGLArrayFromDLPack(ptr, &chandle))
 */
  }

  /* "dgl/_ffi/_cython/ndarray.pxi":24
 *         pycapsule.PyCapsule_SetName(dltensor, _c_str_used_dltensor)
 *         return c_make_array(chandle, 0)
 *     raise ValueError("Expect a dltensor field, pycapsule.PyCapsule can only be consumed once")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(4, 24, __pyx_L1_error)

  /* "dgl/_ffi/_cython/ndarray.pxi":14
 * 
 * 
 * def _from_dlpack(object dltensor):             # <<<<<<<<<<<<<<
 *     cdef DLManagedTensor* ptr
 *     cdef DLTensorHandle chandle
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("dgl._ffi._cy3.core._from_dlpack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/ndarray.pxi":31
 *     cdef int c_is_view
 * 
 *     cdef inline _set_handle(self, handle):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if handle is None:
 */

static CYTHON_INLINE PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_11NDArrayBase__set_handle(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self, PyObject *__pyx_v_handle) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  unsigned PY_LONG_LONG __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_handle", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":33
 *     cdef inline _set_handle(self, handle):
 *         cdef unsigned long long ptr
 *         if handle is None:             # <<<<<<<<<<<<<<
 *             self.chandle = NULL
 *         else:
 */
  __pyx_t_1 = (__pyx_v_handle == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "dgl/_ffi/_cython/ndarray.pxi":34
 *         cdef unsigned long long ptr
 *         if handle is None:
 *             self.chandle = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             ptr = ctypes.cast(handle, ctypes.c_void_p).value
 */
    __pyx_v_self->chandle = NULL;

    /* "dgl/_ffi/_cython/ndarray.pxi":33
 *     cdef inline _set_handle(self, handle):
 *         cdef unsigned long long ptr
 *         if handle is None:             # <<<<<<<<<<<<<<
 *             self.chandle = NULL
 *         else:
 */
    goto __pyx_L3;
  }

  /* "dgl/_ffi/_cython/ndarray.pxi":36
 *             self.chandle = NULL
 *         else:
 *             ptr = ctypes.cast(handle, ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *             self.chandle = <DLTensor*>(ptr)
 * 
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_handle, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 36, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_handle, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 36, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_handle);
      __Pyx_GIVEREF(__pyx_v_handle);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_handle);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_5); if (unlikely((__pyx_t_9 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(4, 36, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ptr = __pyx_t_9;

    /* "dgl/_ffi/_cython/ndarray.pxi":37
 *         else:
 *             ptr = ctypes.cast(handle, ctypes.c_void_p).value
 *             self.chandle = <DLTensor*>(ptr)             # <<<<<<<<<<<<<<
 * 
 *     property _dgl_handle:
 */
    __pyx_v_self->chandle = ((DLTensor *)__pyx_v_ptr);
  }
  __pyx_L3:;

  /* "dgl/_ffi/_cython/ndarray.pxi":31
 *     cdef int c_is_view
 * 
 *     cdef inline _set_handle(self, handle):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if handle is None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.NDArrayBase._set_handle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/ndarray.pxi":40
 * 
 *     property _dgl_handle:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long long>self.chandle
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_11_dgl_handle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_11_dgl_handle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_11_dgl_handle___get__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_11_dgl_handle___get__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":41
 *     property _dgl_handle:
 *         def __get__(self):
 *             return <unsigned long long>self.chandle             # <<<<<<<<<<<<<<
 * 
 *     property handle:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_self->chandle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/ndarray.pxi":40
 * 
 *     property _dgl_handle:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <unsigned long long>self.chandle
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.NDArrayBase._dgl_handle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/ndarray.pxi":44
 * 
 *     property handle:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.chandle == NULL:
 *                 return None
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle___get__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle___get__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":45
 *     property handle:
 *         def __get__(self):
 *             if self.chandle == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_self->chandle == NULL) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/ndarray.pxi":46
 *         def __get__(self):
 *             if self.chandle == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return ctypes.cast(
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "dgl/_ffi/_cython/ndarray.pxi":45
 *     property handle:
 *         def __get__(self):
 *             if self.chandle == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  }

  /* "dgl/_ffi/_cython/ndarray.pxi":48
 *                 return None
 *             else:
 *                 return ctypes.cast(             # <<<<<<<<<<<<<<
 *                     <unsigned long long>self.chandle, DGLArrayHandle)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dgl/_ffi/_cython/ndarray.pxi":49
 *             else:
 *                 return ctypes.cast(
 *                     <unsigned long long>self.chandle, DGLArrayHandle)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_self->chandle)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_DGLArrayHandle); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 48, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 48, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 48, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_5);
      __pyx_t_3 = 0;
      __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 48, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "dgl/_ffi/_cython/ndarray.pxi":44
 * 
 *     property handle:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.chandle == NULL:
 *                 return None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.NDArrayBase.handle.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/ndarray.pxi":51
 *                     <unsigned long long>self.chandle, DGLArrayHandle)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_handle(value)
 * 
 */

/* Python wrapper */
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle_2__set__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle_2__set__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":52
 * 
 *         def __set__(self, value):
 *             self._set_handle(value)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, handle, is_view):
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_11NDArrayBase__set_handle(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/ndarray.pxi":51
 *                     <unsigned long long>self.chandle, DGLArrayHandle)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_handle(value)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.NDArrayBase.handle.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/ndarray.pxi":54
 *             self._set_handle(value)
 * 
 *     def __init__(self, handle, is_view):             # <<<<<<<<<<<<<<
 *         self._set_handle(handle)
 *         self.c_is_view = is_view
 */

/* Python wrapper */
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handle = 0;
  PyObject *__pyx_v_is_view = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_is_view,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_view)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(4, 54, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(4, 54, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handle = values[0];
    __pyx_v_is_view = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 54, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("dgl._ffi._cy3.core.NDArrayBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase___init__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)__pyx_v_self), __pyx_v_handle, __pyx_v_is_view);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase___init__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self, PyObject *__pyx_v_handle, PyObject *__pyx_v_is_view) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":55
 * 
 *     def __init__(self, handle, is_view):
 *         self._set_handle(handle)             # <<<<<<<<<<<<<<
 *         self.c_is_view = is_view
 * 
 */
  __pyx_t_1 = __pyx_f_3dgl_4_ffi_4_cy3_4core_11NDArrayBase__set_handle(__pyx_v_self, __pyx_v_handle); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/ndarray.pxi":56
 *     def __init__(self, handle, is_view):
 *         self._set_handle(handle)
 *         self.c_is_view = is_view             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_is_view); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 56, __pyx_L1_error)
  __pyx_v_self->c_is_view = __pyx_t_2;

  /* "dgl/_ffi/_cython/ndarray.pxi":54
 *             self._set_handle(value)
 * 
 *     def __init__(self, handle, is_view):             # <<<<<<<<<<<<<<
 *         self._set_handle(handle)
 *         self.c_is_view = is_view
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.NDArrayBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/ndarray.pxi":58
 *         self.c_is_view = is_view
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_is_view == 0:
 *             CALL(DGLArrayFree(self.chandle))
 */

/* Python wrapper */
static void __pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_2__dealloc__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_2__dealloc__(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":59
 * 
 *     def __dealloc__(self):
 *         if self.c_is_view == 0:             # <<<<<<<<<<<<<<
 *             CALL(DGLArrayFree(self.chandle))
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->c_is_view == 0) != 0);
  if (__pyx_t_1) {

    /* "dgl/_ffi/_cython/ndarray.pxi":60
 *     def __dealloc__(self):
 *         if self.c_is_view == 0:
 *             CALL(DGLArrayFree(self.chandle))             # <<<<<<<<<<<<<<
 * 
 *     def to_dlpack(self, alignment=0):
 */
    __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLArrayFree(__pyx_v_self->chandle)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "dgl/_ffi/_cython/ndarray.pxi":59
 * 
 *     def __dealloc__(self):
 *         if self.c_is_view == 0:             # <<<<<<<<<<<<<<
 *             CALL(DGLArrayFree(self.chandle))
 * 
 */
  }

  /* "dgl/_ffi/_cython/ndarray.pxi":58
 *         self.c_is_view = is_view
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_is_view == 0:
 *             CALL(DGLArrayFree(self.chandle))
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("dgl._ffi._cy3.core.NDArrayBase.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "dgl/_ffi/_cython/ndarray.pxi":62
 *             CALL(DGLArrayFree(self.chandle))
 * 
 *     def to_dlpack(self, alignment=0):             # <<<<<<<<<<<<<<
 *         """Produce an array from a DLPack Tensor without copying memory
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_5to_dlpack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_4to_dlpack[] = "Produce an array from a DLPack Tensor without copying memory\n\n        Args\n        -------\n        alignment: int, default to be 0\n        Indicates the alignment requirement when converting to dlpack. Will copy to a \n        new tensor if the alignment requirement is not satisfied. \n        0 means no alignment requirement.\n        \n        Returns\n        -------\n        dlpack : DLPack tensor view of the array data\n        ";
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_5to_dlpack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_alignment = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_dlpack (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_alignment,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alignment);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "to_dlpack") < 0)) __PYX_ERR(4, 62, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_alignment = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_dlpack", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 62, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("dgl._ffi._cy3.core.NDArrayBase.to_dlpack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_4to_dlpack(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)__pyx_v_self), __pyx_v_alignment);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_4to_dlpack(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self, PyObject *__pyx_v_alignment) {
  DLManagedTensor *__pyx_v_dltensor;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_dlpack", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":77
 *         """
 *         cdef DLManagedTensor* dltensor
 *         if self.c_is_view != 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("to_dlpack do not work with memory views")
 *         CALL(DGLArrayToDLPack(self.chandle, &dltensor, alignment))
 */
  __pyx_t_1 = ((__pyx_v_self->c_is_view != 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "dgl/_ffi/_cython/ndarray.pxi":78
 *         cdef DLManagedTensor* dltensor
 *         if self.c_is_view != 0:
 *             raise ValueError("to_dlpack do not work with memory views")             # <<<<<<<<<<<<<<
 *         CALL(DGLArrayToDLPack(self.chandle, &dltensor, alignment))
 *         return pycapsule.PyCapsule_New(dltensor, _c_str_dltensor, _c_dlpack_deleter)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(4, 78, __pyx_L1_error)

    /* "dgl/_ffi/_cython/ndarray.pxi":77
 *         """
 *         cdef DLManagedTensor* dltensor
 *         if self.c_is_view != 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("to_dlpack do not work with memory views")
 *         CALL(DGLArrayToDLPack(self.chandle, &dltensor, alignment))
 */
  }

  /* "dgl/_ffi/_cython/ndarray.pxi":79
 *         if self.c_is_view != 0:
 *             raise ValueError("to_dlpack do not work with memory views")
 *         CALL(DGLArrayToDLPack(self.chandle, &dltensor, alignment))             # <<<<<<<<<<<<<<
 *         return pycapsule.PyCapsule_New(dltensor, _c_str_dltensor, _c_dlpack_deleter)
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_alignment); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 79, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_3dgl_4_ffi_4_cy3_4core_CALL(DGLArrayToDLPack(__pyx_v_self->chandle, (&__pyx_v_dltensor), __pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/ndarray.pxi":80
 *             raise ValueError("to_dlpack do not work with memory views")
 *         CALL(DGLArrayToDLPack(self.chandle, &dltensor, alignment))
 *         return pycapsule.PyCapsule_New(dltensor, _c_str_dltensor, _c_dlpack_deleter)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyCapsule_New(__pyx_v_dltensor, __pyx_v_3dgl_4_ffi_4_cy3_4core__c_str_dltensor, __pyx_f_3dgl_4_ffi_4_cy3_4core__c_dlpack_deleter); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/ndarray.pxi":62
 *             CALL(DGLArrayFree(self.chandle))
 * 
 *     def to_dlpack(self, alignment=0):             # <<<<<<<<<<<<<<
 *         """Produce an array from a DLPack Tensor without copying memory
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.NDArrayBase.to_dlpack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6__reduce_cython__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.NDArrayBase.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_8__setstate_cython__(((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.NDArrayBase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/ndarray.pxi":83
 * 
 * 
 * cdef c_make_array(void* chandle, is_view):             # <<<<<<<<<<<<<<
 *     ret = _CLASS_NDARRAY(None, is_view)
 *     (<NDArrayBase>ret).chandle = <DLTensor*>chandle
 */

static PyObject *__pyx_f_3dgl_4_ffi_4_cy3_4core_c_make_array(void *__pyx_v_chandle, PyObject *__pyx_v_is_view) {
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_make_array", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":84
 * 
 * cdef c_make_array(void* chandle, is_view):
 *     ret = _CLASS_NDARRAY(None, is_view)             # <<<<<<<<<<<<<<
 *     (<NDArrayBase>ret).chandle = <DLTensor*>chandle
 *     return ret
 */
  __Pyx_INCREF(__pyx_v_3dgl_4_ffi_4_cy3_4core__CLASS_NDARRAY);
  __pyx_t_2 = __pyx_v_3dgl_4_ffi_4_cy3_4core__CLASS_NDARRAY; __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, Py_None, __pyx_v_is_view};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 84, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, Py_None, __pyx_v_is_view};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 84, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, Py_None);
    __Pyx_INCREF(__pyx_v_is_view);
    __Pyx_GIVEREF(__pyx_v_is_view);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_is_view);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ret = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/ndarray.pxi":85
 * cdef c_make_array(void* chandle, is_view):
 *     ret = _CLASS_NDARRAY(None, is_view)
 *     (<NDArrayBase>ret).chandle = <DLTensor*>chandle             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)__pyx_v_ret)->chandle = ((DLTensor *)__pyx_v_chandle);

  /* "dgl/_ffi/_cython/ndarray.pxi":86
 *     ret = _CLASS_NDARRAY(None, is_view)
 *     (<NDArrayBase>ret).chandle = <DLTensor*>chandle
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/ndarray.pxi":83
 * 
 * 
 * cdef c_make_array(void* chandle, is_view):             # <<<<<<<<<<<<<<
 *     ret = _CLASS_NDARRAY(None, is_view)
 *     (<NDArrayBase>ret).chandle = <DLTensor*>chandle
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("dgl._ffi._cy3.core.c_make_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/ndarray.pxi":93
 * cdef _DGL_EXT_RET = {}
 * 
 * def _reg_extension(cls, fcreate):             # <<<<<<<<<<<<<<
 *     global _DGL_COMPATS
 *     _DGL_COMPATS += (cls,)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11_reg_extension(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3dgl_4_ffi_4_cy3_4core_11_reg_extension = {"_reg_extension", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3dgl_4_ffi_4_cy3_4core_11_reg_extension, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_11_reg_extension(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cls = 0;
  PyObject *__pyx_v_fcreate = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_reg_extension (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cls,&__pyx_n_s_fcreate,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cls)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fcreate)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_reg_extension", 1, 2, 2, 1); __PYX_ERR(4, 93, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_reg_extension") < 0)) __PYX_ERR(4, 93, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_cls = values[0];
    __pyx_v_fcreate = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_reg_extension", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 93, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("dgl._ffi._cy3.core._reg_extension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_10_reg_extension(__pyx_self, __pyx_v_cls, __pyx_v_fcreate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_10_reg_extension(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls, PyObject *__pyx_v_fcreate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_reg_extension", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":95
 * def _reg_extension(cls, fcreate):
 *     global _DGL_COMPATS
 *     _DGL_COMPATS += (cls,)             # <<<<<<<<<<<<<<
 *     if fcreate:
 *         _DGL_EXT_RET[cls._dgl_tcode] = fcreate
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_cls);
  __Pyx_GIVEREF(__pyx_v_cls);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_cls);
  __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_COMPATS, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_COMPATS);
  __Pyx_DECREF_SET(__pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_COMPATS, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/ndarray.pxi":96
 *     global _DGL_COMPATS
 *     _DGL_COMPATS += (cls,)
 *     if fcreate:             # <<<<<<<<<<<<<<
 *         _DGL_EXT_RET[cls._dgl_tcode] = fcreate
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_fcreate); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(4, 96, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "dgl/_ffi/_cython/ndarray.pxi":97
 *     _DGL_COMPATS += (cls,)
 *     if fcreate:
 *         _DGL_EXT_RET[cls._dgl_tcode] = fcreate             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_cls, __pyx_n_s_dgl_tcode); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_EXT_RET, __pyx_t_2, __pyx_v_fcreate) < 0)) __PYX_ERR(4, 97, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "dgl/_ffi/_cython/ndarray.pxi":96
 *     global _DGL_COMPATS
 *     _DGL_COMPATS += (cls,)
 *     if fcreate:             # <<<<<<<<<<<<<<
 *         _DGL_EXT_RET[cls._dgl_tcode] = fcreate
 * 
 */
  }

  /* "dgl/_ffi/_cython/ndarray.pxi":93
 * cdef _DGL_EXT_RET = {}
 * 
 * def _reg_extension(cls, fcreate):             # <<<<<<<<<<<<<<
 *     global _DGL_COMPATS
 *     _DGL_COMPATS += (cls,)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("dgl._ffi._cy3.core._reg_extension", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/ndarray.pxi":100
 * 
 * 
 * def _make_array(handle, is_view):             # <<<<<<<<<<<<<<
 *     cdef unsigned long long ptr
 *     ptr = ctypes.cast(handle, ctypes.c_void_p).value
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_13_make_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3dgl_4_ffi_4_cy3_4core_13_make_array = {"_make_array", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3dgl_4_ffi_4_cy3_4core_13_make_array, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_13_make_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_handle = 0;
  PyObject *__pyx_v_is_view = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_make_array (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_handle,&__pyx_n_s_is_view,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_handle)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_view)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_make_array", 1, 2, 2, 1); __PYX_ERR(4, 100, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_make_array") < 0)) __PYX_ERR(4, 100, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_handle = values[0];
    __pyx_v_is_view = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_make_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 100, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("dgl._ffi._cy3.core._make_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_12_make_array(__pyx_self, __pyx_v_handle, __pyx_v_is_view);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_12_make_array(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_handle, PyObject *__pyx_v_is_view) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  unsigned PY_LONG_LONG __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_array", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":102
 * def _make_array(handle, is_view):
 *     cdef unsigned long long ptr
 *     ptr = ctypes.cast(handle, ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *     return c_make_array(<void*>ptr, is_view)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_cast); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_c_void_p); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_handle, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 102, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_handle, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 102, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_handle);
    __Pyx_GIVEREF(__pyx_v_handle);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_handle);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(__pyx_t_3); if (unlikely((__pyx_t_7 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(4, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_ptr = __pyx_t_7;

  /* "dgl/_ffi/_cython/ndarray.pxi":103
 *     cdef unsigned long long ptr
 *     ptr = ctypes.cast(handle, ctypes.c_void_p).value
 *     return c_make_array(<void*>ptr, is_view)             # <<<<<<<<<<<<<<
 * 
 * cdef object _CLASS_NDARRAY = None
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_3dgl_4_ffi_4_cy3_4core_c_make_array(((void *)__pyx_v_ptr), __pyx_v_is_view); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "dgl/_ffi/_cython/ndarray.pxi":100
 * 
 * 
 * def _make_array(handle, is_view):             # <<<<<<<<<<<<<<
 *     cdef unsigned long long ptr
 *     ptr = ctypes.cast(handle, ctypes.c_void_p).value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("dgl._ffi._cy3.core._make_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dgl/_ffi/_cython/ndarray.pxi":107
 * cdef object _CLASS_NDARRAY = None
 * 
 * def _set_class_ndarray(cls):             # <<<<<<<<<<<<<<
 *     global _CLASS_NDARRAY
 *     _CLASS_NDARRAY = cls
 */

/* Python wrapper */
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_15_set_class_ndarray(PyObject *__pyx_self, PyObject *__pyx_v_cls); /*proto*/
static PyMethodDef __pyx_mdef_3dgl_4_ffi_4_cy3_4core_15_set_class_ndarray = {"_set_class_ndarray", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_15_set_class_ndarray, METH_O, 0};
static PyObject *__pyx_pw_3dgl_4_ffi_4_cy3_4core_15_set_class_ndarray(PyObject *__pyx_self, PyObject *__pyx_v_cls) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_class_ndarray (wrapper)", 0);
  __pyx_r = __pyx_pf_3dgl_4_ffi_4_cy3_4core_14_set_class_ndarray(__pyx_self, ((PyObject *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3dgl_4_ffi_4_cy3_4core_14_set_class_ndarray(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_class_ndarray", 0);

  /* "dgl/_ffi/_cython/ndarray.pxi":109
 * def _set_class_ndarray(cls):
 *     global _CLASS_NDARRAY
 *     _CLASS_NDARRAY = cls             # <<<<<<<<<<<<<<
 */
  __Pyx_INCREF(__pyx_v_cls);
  __Pyx_XGOTREF(__pyx_v_3dgl_4_ffi_4_cy3_4core__CLASS_NDARRAY);
  __Pyx_DECREF_SET(__pyx_v_3dgl_4_ffi_4_cy3_4core__CLASS_NDARRAY, __pyx_v_cls);
  __Pyx_GIVEREF(__pyx_v_cls);

  /* "dgl/_ffi/_cython/ndarray.pxi":107
 * cdef object _CLASS_NDARRAY = None
 * 
 * def _set_class_ndarray(cls):             # <<<<<<<<<<<<<<
 *     global _CLASS_NDARRAY
 *     _CLASS_NDARRAY = cls
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_ObjectBase __pyx_vtable_3dgl_4_ffi_4_cy3_4core_ObjectBase;

static PyObject *__pyx_tp_new_3dgl_4_ffi_4_cy3_4core_ObjectBase(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *)o);
  p->__pyx_vtab = __pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_ObjectBase;
  return o;
}

static void __pyx_tp_dealloc_3dgl_4_ffi_4_cy3_4core_ObjectBase(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_getattro_3dgl_4_ffi_4_cy3_4core_ObjectBase(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_3__getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop_3dgl_4_ffi_4_cy3_4core_10ObjectBase_handle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle_1__get__(o);
}

static int __pyx_setprop_3dgl_4_ffi_4_cy3_4core_10ObjectBase_handle(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_6handle_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_3dgl_4_ffi_4_cy3_4core_ObjectBase[] = {
  {"__getattr__", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_3__getattr__, METH_O|METH_COEXIST, 0},
  {"__init_handle_by_constructor__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_5__init_handle_by_constructor__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3dgl_4_ffi_4_cy3_4core_10ObjectBase_4__init_handle_by_constructor__},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_10ObjectBase_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3dgl_4_ffi_4_cy3_4core_ObjectBase[] = {
  {(char *)"handle", __pyx_getprop_3dgl_4_ffi_4_cy3_4core_10ObjectBase_handle, __pyx_setprop_3dgl_4_ffi_4_cy3_4core_10ObjectBase_handle, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3dgl_4_ffi_4_cy3_4core_ObjectBase = {
  PyVarObject_HEAD_INIT(0, 0)
  "dgl._ffi._cy3.core.ObjectBase", /*tp_name*/
  sizeof(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3dgl_4_ffi_4_cy3_4core_ObjectBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_3dgl_4_ffi_4_cy3_4core_ObjectBase, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3dgl_4_ffi_4_cy3_4core_ObjectBase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3dgl_4_ffi_4_cy3_4core_ObjectBase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3dgl_4_ffi_4_cy3_4core_ObjectBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_FunctionBase __pyx_vtable_3dgl_4_ffi_4_cy3_4core_FunctionBase;

static PyObject *__pyx_tp_new_3dgl_4_ffi_4_cy3_4core_FunctionBase(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *)o);
  p->__pyx_vtab = __pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_FunctionBase;
  return o;
}

static void __pyx_tp_dealloc_3dgl_4_ffi_4_cy3_4core_FunctionBase(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_3dgl_4_ffi_4_cy3_4core_12FunctionBase_is_global(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global_1__get__(o);
}

static int __pyx_setprop_3dgl_4_ffi_4_cy3_4core_12FunctionBase_is_global(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9is_global_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_3dgl_4_ffi_4_cy3_4core_12FunctionBase_handle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle_1__get__(o);
}

static int __pyx_setprop_3dgl_4_ffi_4_cy3_4core_12FunctionBase_handle(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_6handle_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_3dgl_4_ffi_4_cy3_4core_FunctionBase[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3dgl_4_ffi_4_cy3_4core_FunctionBase[] = {
  {(char *)"is_global", __pyx_getprop_3dgl_4_ffi_4_cy3_4core_12FunctionBase_is_global, __pyx_setprop_3dgl_4_ffi_4_cy3_4core_12FunctionBase_is_global, (char *)0, 0},
  {(char *)"handle", __pyx_getprop_3dgl_4_ffi_4_cy3_4core_12FunctionBase_handle, __pyx_setprop_3dgl_4_ffi_4_cy3_4core_12FunctionBase_handle, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3dgl_4_ffi_4_cy3_4core_FunctionBase = {
  PyVarObject_HEAD_INIT(0, 0)
  "dgl._ffi._cy3.core.FunctionBase", /*tp_name*/
  sizeof(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3dgl_4_ffi_4_cy3_4core_FunctionBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_5__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3dgl_4_ffi_4_cy3_4core_FunctionBase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3dgl_4_ffi_4_cy3_4core_FunctionBase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3dgl_4_ffi_4_cy3_4core_12FunctionBase_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3dgl_4_ffi_4_cy3_4core_FunctionBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};
static struct __pyx_vtabstruct_3dgl_4_ffi_4_cy3_4core_NDArrayBase __pyx_vtable_3dgl_4_ffi_4_cy3_4core_NDArrayBase;

static PyObject *__pyx_tp_new_3dgl_4_ffi_4_cy3_4core_NDArrayBase(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *)o);
  p->__pyx_vtab = __pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_NDArrayBase;
  return o;
}

static void __pyx_tp_dealloc_3dgl_4_ffi_4_cy3_4core_NDArrayBase(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_3dgl_4_ffi_4_cy3_4core_11NDArrayBase__dgl_handle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_11_dgl_handle_1__get__(o);
}

static PyObject *__pyx_getprop_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_handle(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle_1__get__(o);
}

static int __pyx_setprop_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_handle(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_6handle_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_3dgl_4_ffi_4_cy3_4core_NDArrayBase[] = {
  {"to_dlpack", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_5to_dlpack, METH_VARARGS|METH_KEYWORDS, __pyx_doc_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_4to_dlpack},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_3dgl_4_ffi_4_cy3_4core_NDArrayBase[] = {
  {(char *)"_dgl_handle", __pyx_getprop_3dgl_4_ffi_4_cy3_4core_11NDArrayBase__dgl_handle, 0, (char *)0, 0},
  {(char *)"handle", __pyx_getprop_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_handle, __pyx_setprop_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_handle, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3dgl_4_ffi_4_cy3_4core_NDArrayBase = {
  PyVarObject_HEAD_INIT(0, 0)
  "dgl._ffi._cy3.core.NDArrayBase", /*tp_name*/
  sizeof(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3dgl_4_ffi_4_cy3_4core_NDArrayBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3dgl_4_ffi_4_cy3_4core_NDArrayBase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_3dgl_4_ffi_4_cy3_4core_NDArrayBase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_3dgl_4_ffi_4_cy3_4core_11NDArrayBase_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3dgl_4_ffi_4_cy3_4core_NDArrayBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_core(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_core},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "core",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_n_s_CLASS_FUNCTION, __pyx_k_CLASS_FUNCTION, sizeof(__pyx_k_CLASS_FUNCTION), 0, 0, 1, 1},
  {&__pyx_n_s_CLASS_MODULE, __pyx_k_CLASS_MODULE, sizeof(__pyx_k_CLASS_MODULE), 0, 0, 1, 1},
  {&__pyx_n_s_DGLArrayHandle, __pyx_k_DGLArrayHandle, sizeof(__pyx_k_DGLArrayHandle), 0, 0, 1, 1},
  {&__pyx_n_s_DGLByteArray, __pyx_k_DGLByteArray, sizeof(__pyx_k_DGLByteArray), 0, 0, 1, 1},
  {&__pyx_n_s_DGLContext, __pyx_k_DGLContext, sizeof(__pyx_k_DGLContext), 0, 0, 1, 1},
  {&__pyx_n_s_DGLError, __pyx_k_DGLError, sizeof(__pyx_k_DGLError), 0, 0, 1, 1},
  {&__pyx_n_s_DGLType, __pyx_k_DGLType, sizeof(__pyx_k_DGLType), 0, 0, 1, 1},
  {&__pyx_kp_s_Don_t_know_how_to_handle_type_s, __pyx_k_Don_t_know_how_to_handle_type_s, sizeof(__pyx_k_Don_t_know_how_to_handle_type_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Expect_a_dltensor_field_pycapsul, __pyx_k_Expect_a_dltensor_field_pycapsul, sizeof(__pyx_k_Expect_a_dltensor_field_pycapsul), 0, 0, 1, 0},
  {&__pyx_n_s_FunctionBase, __pyx_k_FunctionBase, sizeof(__pyx_k_FunctionBase), 0, 0, 1, 1},
  {&__pyx_n_s_Integral, __pyx_k_Integral, sizeof(__pyx_k_Integral), 0, 0, 1, 1},
  {&__pyx_n_s_NDArrayBase, __pyx_k_NDArrayBase, sizeof(__pyx_k_NDArrayBase), 0, 0, 1, 1},
  {&__pyx_n_s_Number, __pyx_k_Number, sizeof(__pyx_k_Number), 0, 0, 1, 1},
  {&__pyx_n_s_OBJECT_TYPE, __pyx_k_OBJECT_TYPE, sizeof(__pyx_k_OBJECT_TYPE), 0, 0, 1, 1},
  {&__pyx_n_s_ObjectBase, __pyx_k_ObjectBase, sizeof(__pyx_k_ObjectBase), 0, 0, 1, 1},
  {&__pyx_n_s_ObjectGeneric, __pyx_k_ObjectGeneric, sizeof(__pyx_k_ObjectGeneric), 0, 0, 1, 1},
  {&__pyx_n_s_POINTER, __pyx_k_POINTER, sizeof(__pyx_k_POINTER), 0, 0, 1, 1},
  {&__pyx_kp_s_PackedFunction_can_only_support, __pyx_k_PackedFunction_can_only_support, sizeof(__pyx_k_PackedFunction_can_only_support), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unhandled_type_code_d, __pyx_k_Unhandled_type_code_d, sizeof(__pyx_k_Unhandled_type_code_d), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 0, 1, 1},
  {&__pyx_n_s_addressof, __pyx_k_addressof, sizeof(__pyx_k_addressof), 0, 0, 1, 1},
  {&__pyx_n_s_alignment, __pyx_k_alignment, sizeof(__pyx_k_alignment), 0, 0, 1, 1},
  {&__pyx_n_s_api_internal, __pyx_k_api_internal, sizeof(__pyx_k_api_internal), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_c_byte, __pyx_k_c_byte, sizeof(__pyx_k_c_byte), 0, 0, 1, 1},
  {&__pyx_n_s_c_is_global, __pyx_k_c_is_global, sizeof(__pyx_k_c_is_global), 0, 0, 1, 1},
  {&__pyx_n_s_c_void_p, __pyx_k_c_void_p, sizeof(__pyx_k_c_void_p), 0, 0, 1, 1},
  {&__pyx_n_s_cast, __pyx_k_cast, sizeof(__pyx_k_cast), 0, 0, 1, 1},
  {&__pyx_n_s_chandle, __pyx_k_chandle, sizeof(__pyx_k_chandle), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {&__pyx_n_s_convert_to_dgl_func, __pyx_k_convert_to_dgl_func, sizeof(__pyx_k_convert_to_dgl_func), 0, 0, 1, 1},
  {&__pyx_n_s_convert_to_object, __pyx_k_convert_to_object, sizeof(__pyx_k_convert_to_object), 0, 0, 1, 1},
  {&__pyx_n_s_ctypes, __pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_dgl__ffi__cy3_core, __pyx_k_dgl__ffi__cy3_core, sizeof(__pyx_k_dgl__ffi__cy3_core), 0, 0, 1, 1},
  {&__pyx_kp_s_dgl__ffi__cython_function_pxi, __pyx_k_dgl__ffi__cython_function_pxi, sizeof(__pyx_k_dgl__ffi__cython_function_pxi), 0, 0, 1, 0},
  {&__pyx_kp_s_dgl__ffi__cython_ndarray_pxi, __pyx_k_dgl__ffi__cython_ndarray_pxi, sizeof(__pyx_k_dgl__ffi__cython_ndarray_pxi), 0, 0, 1, 0},
  {&__pyx_kp_s_dgl__ffi__cython_object_pxi, __pyx_k_dgl__ffi__cython_object_pxi, sizeof(__pyx_k_dgl__ffi__cython_object_pxi), 0, 0, 1, 0},
  {&__pyx_n_s_dgl_handle, __pyx_k_dgl_handle, sizeof(__pyx_k_dgl_handle), 0, 0, 1, 1},
  {&__pyx_n_s_dgl_tcode, __pyx_k_dgl_tcode, sizeof(__pyx_k_dgl_tcode), 0, 0, 1, 1},
  {&__pyx_n_s_dltensor, __pyx_k_dltensor, sizeof(__pyx_k_dltensor), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_fconstructor, __pyx_k_fconstructor, sizeof(__pyx_k_fconstructor), 0, 0, 1, 1},
  {&__pyx_n_s_fcreate, __pyx_k_fcreate, sizeof(__pyx_k_fcreate), 0, 0, 1, 1},
  {&__pyx_n_s_format_exc, __pyx_k_format_exc, sizeof(__pyx_k_format_exc), 0, 0, 1, 1},
  {&__pyx_n_s_from_buffer, __pyx_k_from_buffer, sizeof(__pyx_k_from_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_from_dlpack, __pyx_k_from_dlpack, sizeof(__pyx_k_from_dlpack), 0, 0, 1, 1},
  {&__pyx_n_s_func_class, __pyx_k_func_class, sizeof(__pyx_k_func_class), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_handle, __pyx_k_handle, sizeof(__pyx_k_handle), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_is_global, __pyx_k_is_global, sizeof(__pyx_k_is_global), 0, 0, 1, 1},
  {&__pyx_n_s_is_view, __pyx_k_is_view, sizeof(__pyx_k_is_view), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_make_array, __pyx_k_make_array, sizeof(__pyx_k_make_array), 0, 0, 1, 1},
  {&__pyx_n_s_memmove, __pyx_k_memmove, sizeof(__pyx_k_memmove), 0, 0, 1, 1},
  {&__pyx_kp_s_memmove_failed, __pyx_k_memmove_failed, sizeof(__pyx_k_memmove_failed), 0, 0, 1, 0},
  {&__pyx_n_s_module_class, __pyx_k_module_class, sizeof(__pyx_k_module_class), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_numbers, __pyx_k_numbers, sizeof(__pyx_k_numbers), 0, 0, 1, 1},
  {&__pyx_n_s_object_generic, __pyx_k_object_generic, sizeof(__pyx_k_object_generic), 0, 0, 1, 1},
  {&__pyx_n_s_ptr, __pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_pyfunc, __pyx_k_pyfunc, sizeof(__pyx_k_pyfunc), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reg_extension, __pyx_k_reg_extension, sizeof(__pyx_k_reg_extension), 0, 0, 1, 1},
  {&__pyx_n_s_register_object, __pyx_k_register_object, sizeof(__pyx_k_register_object), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_n_s_runtime_ctypes, __pyx_k_runtime_ctypes, sizeof(__pyx_k_runtime_ctypes), 0, 0, 1, 1},
  {&__pyx_kp_s_s_object_has_no_attribute_s, __pyx_k_s_object_has_no_attribute_s, sizeof(__pyx_k_s_object_has_no_attribute_s), 0, 0, 1, 0},
  {&__pyx_kp_s_self_chandle_cannot_be_converted, __pyx_k_self_chandle_cannot_be_converted, sizeof(__pyx_k_self_chandle_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_set_class_function, __pyx_k_set_class_function, sizeof(__pyx_k_set_class_function), 0, 0, 1, 1},
  {&__pyx_n_s_set_class_module, __pyx_k_set_class_module, sizeof(__pyx_k_set_class_module), 0, 0, 1, 1},
  {&__pyx_n_s_set_class_ndarray, __pyx_k_set_class_ndarray, sizeof(__pyx_k_set_class_ndarray), 0, 0, 1, 1},
  {&__pyx_n_s_set_class_object_base, __pyx_k_set_class_object_base, sizeof(__pyx_k_set_class_object_base), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_string_types, __pyx_k_string_types, sizeof(__pyx_k_string_types), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_to_dlpack_do_not_work_with_memor, __pyx_k_to_dlpack_do_not_work_with_memor, sizeof(__pyx_k_to_dlpack_do_not_work_with_memor), 0, 0, 1, 0},
  {&__pyx_n_s_traceback, __pyx_k_traceback, sizeof(__pyx_k_traceback), 0, 0, 1, 1},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) __PYX_ERR(0, 64, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(2, 24, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 45, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 164, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_self_chandle_cannot_be_converted); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_chandle_cannot_be_converted); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "dgl/_ffi/_cython/function.pxi":45
 *     if rv is not None:
 *         if isinstance(rv, tuple):
 *             raise ValueError("PackedFunction can only support one return value")             # <<<<<<<<<<<<<<
 *         temp_args = []
 *         make_arg(rv, &value, &tcode, temp_args)
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_PackedFunction_can_only_support); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(2, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "dgl/_ffi/_cython/function.pxi":71
 *                                 dgl_callback_finalize,
 *                                 &chandle))
 *     ret = _CLASS_FUNCTION(None, False)             # <<<<<<<<<<<<<<
 *     (<FunctionBase>ret).chandle = chandle
 *     return ret
 */
  __pyx_tuple__4 = PyTuple_Pack(2, Py_None, Py_False); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(2, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "dgl/_ffi/_cython/function.pxi":164
 *     rptr = (ctypes.c_byte * size).from_buffer(res)
 *     if not ctypes.memmove(rptr, arr.data, size):
 *         raise RuntimeError('memmove failed')             # <<<<<<<<<<<<<<
 *     return res
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_memmove_failed); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_chandle_cannot_be_converted); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":4
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self_chandle_cannot_be_converted); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "dgl/_ffi/_cython/ndarray.pxi":24
 *         pycapsule.PyCapsule_SetName(dltensor, _c_str_used_dltensor)
 *         return c_make_array(chandle, 0)
 *     raise ValueError("Expect a dltensor field, pycapsule.PyCapsule can only be consumed once")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Expect_a_dltensor_field_pycapsul); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(4, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "dgl/_ffi/_cython/ndarray.pxi":78
 *         cdef DLManagedTensor* dltensor
 *         if self.c_is_view != 0:
 *             raise ValueError("to_dlpack do not work with memory views")             # <<<<<<<<<<<<<<
 *         CALL(DGLArrayToDLPack(self.chandle, &dltensor, alignment))
 *         return pycapsule.PyCapsule_New(dltensor, _c_str_dltensor, _c_dlpack_deleter)
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_to_dlpack_do_not_work_with_memor); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(4, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_chandle_cannot_be_converted); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.chandle cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self_chandle_cannot_be_converted); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "dgl/_ffi/_cython/object.pxi":8
 * OBJECT_TYPE = []
 * 
 * def _register_object(int index, object cls):             # <<<<<<<<<<<<<<
 *     """register object class"""
 *     while len(OBJECT_TYPE) <= index:
 */
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_n_s_index, __pyx_n_s_cls); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dgl__ffi__cython_object_pxi, __pyx_n_s_register_object, 8, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 8, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":52
 * 
 * 
 * def convert_to_dgl_func(object pyfunc):             # <<<<<<<<<<<<<<
 *     """Convert a python function to DGL function
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(3, __pyx_n_s_pyfunc, __pyx_n_s_chandle, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dgl__ffi__cython_function_pxi, __pyx_n_s_convert_to_dgl_func, 52, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(2, 52, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":293
 * _CLASS_MODULE = None
 * 
 * def _set_class_module(module_class):             # <<<<<<<<<<<<<<
 *     """Initialize the module."""
 *     global _CLASS_MODULE
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_n_s_module_class); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dgl__ffi__cython_function_pxi, __pyx_n_s_set_class_module, 293, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(2, 293, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":298
 *     _CLASS_MODULE = module_class
 * 
 * def _set_class_function(func_class):             # <<<<<<<<<<<<<<
 *     global _CLASS_FUNCTION
 *     _CLASS_FUNCTION = func_class
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_n_s_func_class); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dgl__ffi__cython_function_pxi, __pyx_n_s_set_class_function, 298, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(2, 298, __pyx_L1_error)

  /* "dgl/_ffi/_cython/ndarray.pxi":14
 * 
 * 
 * def _from_dlpack(object dltensor):             # <<<<<<<<<<<<<<
 *     cdef DLManagedTensor* ptr
 *     cdef DLTensorHandle chandle
 */
  __pyx_tuple__21 = PyTuple_Pack(3, __pyx_n_s_dltensor, __pyx_n_s_ptr, __pyx_n_s_chandle); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(4, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dgl__ffi__cython_ndarray_pxi, __pyx_n_s_from_dlpack, 14, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(4, 14, __pyx_L1_error)

  /* "dgl/_ffi/_cython/ndarray.pxi":93
 * cdef _DGL_EXT_RET = {}
 * 
 * def _reg_extension(cls, fcreate):             # <<<<<<<<<<<<<<
 *     global _DGL_COMPATS
 *     _DGL_COMPATS += (cls,)
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_n_s_cls, __pyx_n_s_fcreate); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(4, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dgl__ffi__cython_ndarray_pxi, __pyx_n_s_reg_extension, 93, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(4, 93, __pyx_L1_error)

  /* "dgl/_ffi/_cython/ndarray.pxi":100
 * 
 * 
 * def _make_array(handle, is_view):             # <<<<<<<<<<<<<<
 *     cdef unsigned long long ptr
 *     ptr = ctypes.cast(handle, ctypes.c_void_p).value
 */
  __pyx_tuple__25 = PyTuple_Pack(3, __pyx_n_s_handle, __pyx_n_s_is_view, __pyx_n_s_ptr); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(4, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dgl__ffi__cython_ndarray_pxi, __pyx_n_s_make_array, 100, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(4, 100, __pyx_L1_error)

  /* "dgl/_ffi/_cython/ndarray.pxi":107
 * cdef object _CLASS_NDARRAY = None
 * 
 * def _set_class_ndarray(cls):             # <<<<<<<<<<<<<<
 *     global _CLASS_NDARRAY
 *     _CLASS_NDARRAY = cls
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_cls); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(4, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_dgl__ffi__cython_ndarray_pxi, __pyx_n_s_set_class_ndarray, 107, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(4, 107, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(5, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(5, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_COMPATS = Py_None; Py_INCREF(Py_None);
  __pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_EXT_RET = Py_None; Py_INCREF(Py_None);
  __pyx_v_3dgl_4_ffi_4_cy3_4core__CLASS_NDARRAY = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_ObjectBase = &__pyx_vtable_3dgl_4_ffi_4_cy3_4core_ObjectBase;
  __pyx_vtable_3dgl_4_ffi_4_cy3_4core_ObjectBase._set_handle = (PyObject *(*)(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_ObjectBase *, PyObject *))__pyx_f_3dgl_4_ffi_4_cy3_4core_10ObjectBase__set_handle;
  if (PyType_Ready(&__pyx_type_3dgl_4_ffi_4_cy3_4core_ObjectBase) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3dgl_4_ffi_4_cy3_4core_ObjectBase.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type_3dgl_4_ffi_4_cy3_4core_ObjectBase.tp_dict, __pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_ObjectBase) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ObjectBase, (PyObject *)&__pyx_type_3dgl_4_ffi_4_cy3_4core_ObjectBase) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3dgl_4_ffi_4_cy3_4core_ObjectBase) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __pyx_ptype_3dgl_4_ffi_4_cy3_4core_ObjectBase = &__pyx_type_3dgl_4_ffi_4_cy3_4core_ObjectBase;
  __pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_FunctionBase = &__pyx_vtable_3dgl_4_ffi_4_cy3_4core_FunctionBase;
  __pyx_vtable_3dgl_4_ffi_4_cy3_4core_FunctionBase._set_handle = (PyObject *(*)(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_FunctionBase *, PyObject *))__pyx_f_3dgl_4_ffi_4_cy3_4core_12FunctionBase__set_handle;
  if (PyType_Ready(&__pyx_type_3dgl_4_ffi_4_cy3_4core_FunctionBase) < 0) __PYX_ERR(2, 250, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3dgl_4_ffi_4_cy3_4core_FunctionBase.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3dgl_4_ffi_4_cy3_4core_FunctionBase.tp_dictoffset && __pyx_type_3dgl_4_ffi_4_cy3_4core_FunctionBase.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3dgl_4_ffi_4_cy3_4core_FunctionBase.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_3dgl_4_ffi_4_cy3_4core_FunctionBase.tp_dict, __pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_FunctionBase) < 0) __PYX_ERR(2, 250, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FunctionBase, (PyObject *)&__pyx_type_3dgl_4_ffi_4_cy3_4core_FunctionBase) < 0) __PYX_ERR(2, 250, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3dgl_4_ffi_4_cy3_4core_FunctionBase) < 0) __PYX_ERR(2, 250, __pyx_L1_error)
  __pyx_ptype_3dgl_4_ffi_4_cy3_4core_FunctionBase = &__pyx_type_3dgl_4_ffi_4_cy3_4core_FunctionBase;
  __pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_NDArrayBase = &__pyx_vtable_3dgl_4_ffi_4_cy3_4core_NDArrayBase;
  __pyx_vtable_3dgl_4_ffi_4_cy3_4core_NDArrayBase._set_handle = (PyObject *(*)(struct __pyx_obj_3dgl_4_ffi_4_cy3_4core_NDArrayBase *, PyObject *))__pyx_f_3dgl_4_ffi_4_cy3_4core_11NDArrayBase__set_handle;
  if (PyType_Ready(&__pyx_type_3dgl_4_ffi_4_cy3_4core_NDArrayBase) < 0) __PYX_ERR(4, 27, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3dgl_4_ffi_4_cy3_4core_NDArrayBase.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_3dgl_4_ffi_4_cy3_4core_NDArrayBase.tp_dictoffset && __pyx_type_3dgl_4_ffi_4_cy3_4core_NDArrayBase.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_3dgl_4_ffi_4_cy3_4core_NDArrayBase.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_3dgl_4_ffi_4_cy3_4core_NDArrayBase.tp_dict, __pyx_vtabptr_3dgl_4_ffi_4_cy3_4core_NDArrayBase) < 0) __PYX_ERR(4, 27, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_NDArrayBase, (PyObject *)&__pyx_type_3dgl_4_ffi_4_cy3_4core_NDArrayBase) < 0) __PYX_ERR(4, 27, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_3dgl_4_ffi_4_cy3_4core_NDArrayBase) < 0) __PYX_ERR(4, 27, __pyx_L1_error)
  __pyx_ptype_3dgl_4_ffi_4_cy3_4core_NDArrayBase = &__pyx_type_3dgl_4_ffi_4_cy3_4core_NDArrayBase;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(8, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcore(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcore(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_core(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_core(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_core(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'core' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_core(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(5, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(5, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("core", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(5, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(5, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(5, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(5, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_dgl___ffi___cy3__core) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(5, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "dgl._ffi._cy3.core")) {
      if (unlikely(PyDict_SetItemString(modules, "dgl._ffi._cy3.core", __pyx_m) < 0)) __PYX_ERR(5, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(5, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(5, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  #endif

  /* "dgl/_ffi/_cython/base.pxi":1
 * from ..base import DGLError             # <<<<<<<<<<<<<<
 * from libcpp.vector cimport vector
 * from libcpp cimport bool
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_DGLError);
  __Pyx_GIVEREF(__pyx_n_s_DGLError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_DGLError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_base, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_DGLError); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DGLError, __pyx_t_1) < 0) __PYX_ERR(3, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/base.pxi":7
 * from cpython cimport pycapsule
 * from libc.stdint cimport int64_t, uint64_t, uint8_t, uint16_t
 * import ctypes             # <<<<<<<<<<<<<<
 * 
 * cdef enum DGLTypeCode:
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ctypes, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctypes, __pyx_t_2) < 0) __PYX_ERR(3, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/object.pxi":1
 * from ... import _api_internal             # <<<<<<<<<<<<<<
 * from ..base import string_types
 * from ..object_generic import _set_class_object_base
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_api_internal);
  __Pyx_GIVEREF(__pyx_n_s_api_internal);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_api_internal);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s__12, __pyx_t_2, 3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_api_internal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_api_internal, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/object.pxi":2
 * from ... import _api_internal
 * from ..base import string_types             # <<<<<<<<<<<<<<
 * from ..object_generic import _set_class_object_base
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_string_types);
  __Pyx_GIVEREF(__pyx_n_s_string_types);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_string_types);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_base, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_string_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_types, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/object.pxi":3
 * from ... import _api_internal
 * from ..base import string_types
 * from ..object_generic import _set_class_object_base             # <<<<<<<<<<<<<<
 * 
 * """Maps object type to its constructor"""
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_set_class_object_base);
  __Pyx_GIVEREF(__pyx_n_s_set_class_object_base);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_set_class_object_base);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_object_generic, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_set_class_object_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_class_object_base, __pyx_t_2) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/object.pxi":6
 * 
 * """Maps object type to its constructor"""
 * OBJECT_TYPE = []             # <<<<<<<<<<<<<<
 * 
 * def _register_object(int index, object cls):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OBJECT_TYPE, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/object.pxi":8
 * OBJECT_TYPE = []
 * 
 * def _register_object(int index, object cls):             # <<<<<<<<<<<<<<
 *     """register object class"""
 *     while len(OBJECT_TYPE) <= index:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3dgl_4_ffi_4_cy3_4core_1_register_object, NULL, __pyx_n_s_dgl__ffi__cy3_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_register_object, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/object.pxi":91
 *         self.chandle = chandle
 * 
 * _set_class_object_base(ObjectBase)             # <<<<<<<<<<<<<<
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_set_class_object_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_ptype_3dgl_4_ffi_4_cy3_4core_ObjectBase)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/function.pxi":1
 * import ctypes             # <<<<<<<<<<<<<<
 * import traceback
 * from cpython cimport Py_INCREF, Py_DECREF
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ctypes, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctypes, __pyx_t_2) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/function.pxi":2
 * import ctypes
 * import traceback             # <<<<<<<<<<<<<<
 * from cpython cimport Py_INCREF, Py_DECREF
 * from numbers import Number, Integral
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_traceback, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_traceback, __pyx_t_2) < 0) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/function.pxi":4
 * import traceback
 * from cpython cimport Py_INCREF, Py_DECREF
 * from numbers import Number, Integral             # <<<<<<<<<<<<<<
 * from ..base import string_types
 * from ..object_generic import convert_to_object, ObjectGeneric
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Number);
  __Pyx_GIVEREF(__pyx_n_s_Number);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Number);
  __Pyx_INCREF(__pyx_n_s_Integral);
  __Pyx_GIVEREF(__pyx_n_s_Integral);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Integral);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numbers, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Number); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Number, __pyx_t_2) < 0) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Integral); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Integral, __pyx_t_2) < 0) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/function.pxi":5
 * from cpython cimport Py_INCREF, Py_DECREF
 * from numbers import Number, Integral
 * from ..base import string_types             # <<<<<<<<<<<<<<
 * from ..object_generic import convert_to_object, ObjectGeneric
 * from ..runtime_ctypes import DGLType, DGLContext, DGLByteArray
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_string_types);
  __Pyx_GIVEREF(__pyx_n_s_string_types);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_string_types);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_base, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_string_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_string_types, __pyx_t_1) < 0) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/function.pxi":6
 * from numbers import Number, Integral
 * from ..base import string_types
 * from ..object_generic import convert_to_object, ObjectGeneric             # <<<<<<<<<<<<<<
 * from ..runtime_ctypes import DGLType, DGLContext, DGLByteArray
 * 
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_convert_to_object);
  __Pyx_GIVEREF(__pyx_n_s_convert_to_object);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_convert_to_object);
  __Pyx_INCREF(__pyx_n_s_ObjectGeneric);
  __Pyx_GIVEREF(__pyx_n_s_ObjectGeneric);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_ObjectGeneric);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_object_generic, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_convert_to_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_convert_to_object, __pyx_t_2) < 0) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ObjectGeneric); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ObjectGeneric, __pyx_t_2) < 0) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/function.pxi":7
 * from ..base import string_types
 * from ..object_generic import convert_to_object, ObjectGeneric
 * from ..runtime_ctypes import DGLType, DGLContext, DGLByteArray             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_DGLType);
  __Pyx_GIVEREF(__pyx_n_s_DGLType);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_DGLType);
  __Pyx_INCREF(__pyx_n_s_DGLContext);
  __Pyx_GIVEREF(__pyx_n_s_DGLContext);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_DGLContext);
  __Pyx_INCREF(__pyx_n_s_DGLByteArray);
  __Pyx_GIVEREF(__pyx_n_s_DGLByteArray);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_DGLByteArray);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_runtime_ctypes, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_DGLType); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DGLType, __pyx_t_1) < 0) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_DGLContext); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DGLContext, __pyx_t_1) < 0) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_DGLByteArray); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DGLByteArray, __pyx_t_1) < 0) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/function.pxi":52
 * 
 * 
 * def convert_to_dgl_func(object pyfunc):             # <<<<<<<<<<<<<<
 *     """Convert a python function to DGL function
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3dgl_4_ffi_4_cy3_4core_3convert_to_dgl_func, NULL, __pyx_n_s_dgl__ffi__cy3_core); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_convert_to_dgl_func, __pyx_t_2) < 0) __PYX_ERR(2, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/function.pxi":290
 *         return make_ret(ret_val, ret_tcode)
 * 
 * _CLASS_FUNCTION = None             # <<<<<<<<<<<<<<
 * _CLASS_MODULE = None
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CLASS_FUNCTION, Py_None) < 0) __PYX_ERR(2, 290, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":291
 * 
 * _CLASS_FUNCTION = None
 * _CLASS_MODULE = None             # <<<<<<<<<<<<<<
 * 
 * def _set_class_module(module_class):
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CLASS_MODULE, Py_None) < 0) __PYX_ERR(2, 291, __pyx_L1_error)

  /* "dgl/_ffi/_cython/function.pxi":293
 * _CLASS_MODULE = None
 * 
 * def _set_class_module(module_class):             # <<<<<<<<<<<<<<
 *     """Initialize the module."""
 *     global _CLASS_MODULE
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3dgl_4_ffi_4_cy3_4core_5_set_class_module, NULL, __pyx_n_s_dgl__ffi__cy3_core); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_class_module, __pyx_t_2) < 0) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/function.pxi":298
 *     _CLASS_MODULE = module_class
 * 
 * def _set_class_function(func_class):             # <<<<<<<<<<<<<<
 *     global _CLASS_FUNCTION
 *     _CLASS_FUNCTION = func_class
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3dgl_4_ffi_4_cy3_4core_7_set_class_function, NULL, __pyx_n_s_dgl__ffi__cy3_core); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_class_function, __pyx_t_2) < 0) __PYX_ERR(2, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dgl/_ffi/_cython/ndarray.pxi":1
 * from ..runtime_ctypes import DGLArrayHandle             # <<<<<<<<<<<<<<
 * 
 * cdef const char* _c_str_dltensor = "dltensor"
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_DGLArrayHandle);
  __Pyx_GIVEREF(__pyx_n_s_DGLArrayHandle);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_DGLArrayHandle);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_runtime_ctypes, __pyx_t_2, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_DGLArrayHandle); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DGLArrayHandle, __pyx_t_2) < 0) __PYX_ERR(4, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/ndarray.pxi":3
 * from ..runtime_ctypes import DGLArrayHandle
 * 
 * cdef const char* _c_str_dltensor = "dltensor"             # <<<<<<<<<<<<<<
 * cdef const char* _c_str_used_dltensor = "used_dltensor"
 * 
 */
  __pyx_v_3dgl_4_ffi_4_cy3_4core__c_str_dltensor = ((char const *)"dltensor");

  /* "dgl/_ffi/_cython/ndarray.pxi":4
 * 
 * cdef const char* _c_str_dltensor = "dltensor"
 * cdef const char* _c_str_used_dltensor = "used_dltensor"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_3dgl_4_ffi_4_cy3_4core__c_str_used_dltensor = ((char const *)"used_dltensor");

  /* "dgl/_ffi/_cython/ndarray.pxi":14
 * 
 * 
 * def _from_dlpack(object dltensor):             # <<<<<<<<<<<<<<
 *     cdef DLManagedTensor* ptr
 *     cdef DLTensorHandle chandle
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3dgl_4_ffi_4_cy3_4core_9_from_dlpack, NULL, __pyx_n_s_dgl__ffi__cy3_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_from_dlpack, __pyx_t_1) < 0) __PYX_ERR(4, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/ndarray.pxi":89
 * 
 * 
 * cdef _DGL_COMPATS = ()             # <<<<<<<<<<<<<<
 * 
 * cdef _DGL_EXT_RET = {}
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __Pyx_XGOTREF(__pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_COMPATS);
  __Pyx_DECREF_SET(__pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_COMPATS, __pyx_empty_tuple);
  __Pyx_GIVEREF(__pyx_empty_tuple);

  /* "dgl/_ffi/_cython/ndarray.pxi":91
 * cdef _DGL_COMPATS = ()
 * 
 * cdef _DGL_EXT_RET = {}             # <<<<<<<<<<<<<<
 * 
 * def _reg_extension(cls, fcreate):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_EXT_RET);
  __Pyx_DECREF_SET(__pyx_v_3dgl_4_ffi_4_cy3_4core__DGL_EXT_RET, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/ndarray.pxi":93
 * cdef _DGL_EXT_RET = {}
 * 
 * def _reg_extension(cls, fcreate):             # <<<<<<<<<<<<<<
 *     global _DGL_COMPATS
 *     _DGL_COMPATS += (cls,)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3dgl_4_ffi_4_cy3_4core_11_reg_extension, NULL, __pyx_n_s_dgl__ffi__cy3_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reg_extension, __pyx_t_1) < 0) __PYX_ERR(4, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/ndarray.pxi":100
 * 
 * 
 * def _make_array(handle, is_view):             # <<<<<<<<<<<<<<
 *     cdef unsigned long long ptr
 *     ptr = ctypes.cast(handle, ctypes.c_void_p).value
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3dgl_4_ffi_4_cy3_4core_13_make_array, NULL, __pyx_n_s_dgl__ffi__cy3_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_make_array, __pyx_t_1) < 0) __PYX_ERR(4, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/ndarray.pxi":105
 *     return c_make_array(<void*>ptr, is_view)
 * 
 * cdef object _CLASS_NDARRAY = None             # <<<<<<<<<<<<<<
 * 
 * def _set_class_ndarray(cls):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_XGOTREF(__pyx_v_3dgl_4_ffi_4_cy3_4core__CLASS_NDARRAY);
  __Pyx_DECREF_SET(__pyx_v_3dgl_4_ffi_4_cy3_4core__CLASS_NDARRAY, Py_None);
  __Pyx_GIVEREF(Py_None);

  /* "dgl/_ffi/_cython/ndarray.pxi":107
 * cdef object _CLASS_NDARRAY = None
 * 
 * def _set_class_ndarray(cls):             # <<<<<<<<<<<<<<
 *     global _CLASS_NDARRAY
 *     _CLASS_NDARRAY = cls
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_3dgl_4_ffi_4_cy3_4core_15_set_class_ndarray, NULL, __pyx_n_s_dgl__ffi__cy3_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_set_class_ndarray, __pyx_t_1) < 0) __PYX_ERR(4, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dgl/_ffi/_cython/core.pyx":1
 * include "./base.pxi"             # <<<<<<<<<<<<<<
 * include "./object.pxi"
 * include "./function.pxi"
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init dgl._ffi._cy3.core", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init dgl._ffi._cy3.core");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_As_unsigned_PY_LONG_LONG(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned PY_LONG_LONG) ((((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned PY_LONG_LONG) -1;
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_unsigned_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
